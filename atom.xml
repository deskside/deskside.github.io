<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Deskside</title>
  
  <subtitle>I am Joey by deskside! | 我是桌沿，你好鸭！</subtitle>
  <link href="http://deskside.github.io/atom.xml" rel="self"/>
  
  <link href="http://deskside.github.io/"/>
  <updated>2023-02-10T01:50:48.795Z</updated>
  <id>http://deskside.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to hide apps in iPhone</title>
    <link href="http://deskside.github.io/2022/11/30/hide-app-on-iphone/"/>
    <id>http://deskside.github.io/2022/11/30/hide-app-on-iphone/</id>
    <published>2022-11-29T16:00:00.000Z</published>
    <updated>2023-02-10T01:50:48.795Z</updated>
    
    <content type="html"><![CDATA[<div class="tag-plugin tabs" align="center"id="tab_3"><div class="nav-tabs"><div class="tab"><a href="#tab_3-1">中文</a></div><div class="tab active"><a href="#tab_3-2">English</a></div></div><div class="tab-content"><div class="tab-pane" id="tab_3-1"><div class="tag-plugin note" color="red"><div class="title">请注意</div><div class="body"><p>技术类文章并不一定会进行中文翻译。如此文章无中文翻译，请移步英文界面阅读。</p></div></div></div><div class="tab-pane active" id="tab_3-2"><p>Rumor has it that Chinese policeman will randomly check people’s phone while taking public transportation or just walking on the road. If apps which are not supposed to be downloaded in China mainland are found, such as Twitter, Telegram, Facebook and so on, the phone owner would be fined.</p><p>This brings a lot concern. I want to find a secure way to help hide those apps in my iPhone. Here are some solutions.</p><h2 id="The-most-secure-way-Buy-another-back-up-phone"><a href="#The-most-secure-way-Buy-another-back-up-phone" class="headerlink" title="The most secure way: Buy another back-up phone"></a>The most secure way: Buy another back-up phone</h2><p>Buying another phone shall be the most secure way. </p><p>Remember to only download apps and store files that are legitimate in China mainland in this new phone. </p><p>Always take it with you and whenever facing a check from the authority, just hand out this one.</p><p>However, this can be cumbersome as well as money-costing.</p><h2 id="For-android-phone-user-Turn-on-the-guest-mode"><a href="#For-android-phone-user-Turn-on-the-guest-mode" class="headerlink" title="For android phone user: Turn on the guest mode"></a>For android phone user: Turn on the guest mode</h2><p>Most android phones support guest mode nowadays.</p><p>After setting up a new set of lock-screen password, whenever this password is passed in to unlock the phone, it will show another home screen rather than the one owner uses on a daily basis.</p><h2 id="For-iPhone-user-Turn-off-some-settings"><a href="#For-iPhone-user-Turn-off-some-settings" class="headerlink" title="For iPhone user: Turn off some settings"></a>For iPhone user: Turn off some settings</h2><p>Unfortunately iPhone doesn’t support guest mode even until iOS 16. Any app being downloaded on this phone can be found in App Gallery.</p><p>All we can do is to make it invisible from the Spotlight search:</p><ol><li>Go to <code>Setting</code>.</li><li>Find the App you want to hide.</li><li>Tap on <code>Siri and Search</code>.</li><li>Simply turn off every toggle in this page.</li></ol><h2 id="Lock-the-app-with-password"><a href="#Lock-the-app-with-password" class="headerlink" title="Lock the app with password"></a>Lock the app with password</h2><p>If you are still worried about those apps being opened by others, we can lock them:</p><ol><li>Go to <code>Setting</code>.</li><li>Find <code>Screen Time</code>.</li><li>Choose the apps that you don’t want others to find in <code>App Limits</code>, and set the time limit to 1 minute.</li><li>Add a passcode in <code>Screen Time Passcode</code>.</li></ol><p>However, this still left 1 minute usage for others. But it’s the best way right now since Apple have not introduced lock-app feature.</p></div></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;tag-plugin tabs&quot; align=&quot;center&quot;id=&quot;tab_3&quot;&gt;&lt;div class=&quot;nav-tabs&quot;&gt;&lt;div class=&quot;tab&quot;&gt;&lt;a href=&quot;#tab_3-1&quot;&gt;中文&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;tab </summary>
      
    
    
    
    <category term="Coding Notes" scheme="http://deskside.github.io/categories/coding-notes/"/>
    
    
    <category term="iOS" scheme="http://deskside.github.io/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>Introspection when learning CoreData</title>
    <link href="http://deskside.github.io/2022/11/25/coding-introspection/"/>
    <id>http://deskside.github.io/2022/11/25/coding-introspection/</id>
    <published>2022-11-24T16:00:00.000Z</published>
    <updated>2023-02-10T01:51:55.671Z</updated>
    
    <content type="html"><![CDATA[<div class="tag-plugin tabs" align="center"id="tab_1"><div class="nav-tabs"><div class="tab"><a href="#tab_1-1">中文</a></div><div class="tab active"><a href="#tab_1-2">English</a></div></div><div class="tab-content"><div class="tab-pane" id="tab_1-1"><div class="tag-plugin note" color="red"><div class="title">请注意</div><div class="body"><p>技术类文章并不一定会进行中文翻译。如此文章无中文翻译，请移步英文界面阅读。</p></div></div></div><div class="tab-pane active" id="tab_1-2"><div class="tag-plugin note" color="orange"><div class="title">Attention</div><div class="body"><p>This is a learning note, which means that there may be mistakes and misunderstanding in it. You are more than welcome to correct me by commenting below.</p></div></div><p>After 2 days of trying to figure out a simple  <code>CoreData</code> problem when building <a href="https://github.com/deskside/emodiary">EmoDiary</a> app, I finally solve it yesterday night. Introspections are made here to help me study more efficiently in th future.</p><h3 id="Key-words-are-incorrect-when-Googling"><a href="#Key-words-are-incorrect-when-Googling" class="headerlink" title="Key words are incorrect when Googling"></a>Key words are incorrect when Googling</h3><p>Due to not fully understanding the structure of Core Data and some basic Swift syntax, I struggled googling blindly resulting in no related answers.</p><p>What I was trying to do is to write a piece of codes that can add one of Emotions (Entity-A) to one attribute of Record (Entity-B). </p><p>But when I type key words to search online, I type in:</p><ul><li>add one entity to another core data (❌)</li><li>core data add attribute to another entity (❌)</li><li>…</li></ul><p>This is incorrect since these key words don’t even touch the essence of my need. </p><p>I didn’t even figure out the relationships between these two entities. They are one to many, not one to one. One Emotion can be assigned to many different Records, while one Record should only have one Emotion.</p><p>So, any blog post or YouTube video considering <code>core data one to many</code> shall have the resolution I need.</p><p>Finally, after typing in the following words, I find <a href="https://youtu.be/Yyd5NARCVcY">the tutorial video</a> I need.</p><ul><li>core data one to many (✅)</li></ul><h3 id="Not-knowing-what-to-code-but-still-coding"><a href="#Not-knowing-what-to-code-but-still-coding" class="headerlink" title="Not knowing what to code but still coding"></a>Not knowing what to code but still coding</h3><p>It’s a bad habit that I didn’t even draft an outline when I started coding, quite like a headless chicken. </p><p>Knowing where to go and how to go is a solid fundamental rule for high productivity. Always sort out what you want to do before actually taking the first step.</p><h3 id="Bad-names"><a href="#Bad-names" class="headerlink" title="Bad names"></a>Bad names</h3><p>I kind of name my core data badly. </p><p>For each record input by user, I call it <code>EmoEachTime</code>. It is too long and not specific enough. Actually, <code>Record</code> is just fine.</p><h3 id="Not-enough-patience"><a href="#Not-enough-patience" class="headerlink" title="Not enough patience"></a>Not enough patience</h3><p>Since I am a native Chinese speaker, I am not so fluent in English reading, especially when it come to CS along with too many terms.</p><p>Be patient. Read docs, watch tutorial videos and study code examples given by Apple.</p></div></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;tag-plugin tabs&quot; align=&quot;center&quot;id=&quot;tab_1&quot;&gt;&lt;div class=&quot;nav-tabs&quot;&gt;&lt;div class=&quot;tab&quot;&gt;&lt;a href=&quot;#tab_1-1&quot;&gt;中文&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;tab </summary>
      
    
    
    
    <category term="Coding Notes" scheme="http://deskside.github.io/categories/coding-notes/"/>
    
    
    <category term="Core Data" scheme="http://deskside.github.io/tags/core-data/"/>
    
  </entry>
  
  <entry>
    <title>Core Data with SwiftUI Tutorial by Paul Hudson</title>
    <link href="http://deskside.github.io/2022/11/24/core-data-swiftui-tutorial/"/>
    <id>http://deskside.github.io/2022/11/24/core-data-swiftui-tutorial/</id>
    <published>2022-11-23T16:00:00.000Z</published>
    <updated>2023-02-10T02:45:44.353Z</updated>
    
    <content type="html"><![CDATA[<div class="tag-plugin tabs" align="center"id="tab_2"><div class="nav-tabs"><div class="tab"><a href="#tab_2-1">中文</a></div><div class="tab active"><a href="#tab_2-2">English</a></div></div><div class="tab-content"><div class="tab-pane" id="tab_2-1"><div class="tag-plugin note" color="red"><div class="title">请注意</div><div class="body"><p>技术类文章并不一定会进行中文翻译。如此文章无中文翻译，请移步英文界面阅读。</p></div></div></div><div class="tab-pane active" id="tab_2-2"><div class="tag-plugin note" color="orange"><div class="title">Attention</div><div class="body"><p>This is a learning note, which means that there may be faults and misunderstanding in it. You are more than welcome to correct me by commenting.</p></div></div><h2 id="L1-Why-does-self-work-for-ForEach"><a href="#L1-Why-does-self-work-for-ForEach" class="headerlink" title="L1: Why does .self work for ForEach?"></a>L1: Why does .self work for ForEach?</h2><p><code>Hashable</code> is essential for SwiftUI to differentiate and locate each view component.</p><p>For more infomation: <a href="https://mp.weixin.qq.com/s/n5yJUPJ4htv8bsCWc0yZ2A">HASH是什么？“哈希值校验”又是怎么回事儿？</a></p><h2 id="L2-Creating-NSManagedObject-subclasses"><a href="#L2-Creating-NSManagedObject-subclasses" class="headerlink" title="L2: Creating NSManagedObject subclasses"></a>L2: Creating NSManagedObject subclasses</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extension</span> <span class="title class_">Movie</span> &#123;</span><br><span class="line">  <span class="keyword">@nonobjc</span> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">func</span> <span class="title class_">fetchRequest</span>() -&gt; <span class="title class_">NSFetchRequest</span>&lt;<span class="title class_">Movie</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">NsFetchReauest</span>&lt;<span class="type">Movie</span>&gt;(entityName： <span class="string">&quot;Movie&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// We can make this not optional by simply deleting question mark</span></span><br><span class="line">  <span class="keyword">@NSManaged</span> <span class="keyword">public</span> <span class="keyword">var</span> title: <span class="type">String</span>?</span><br><span class="line">  <span class="keyword">@NSManaged</span> <span class="keyword">public</span> <span class="keyword">var</span> director: <span class="type">String</span></span><br><span class="line">  <span class="keyword">@NSManaged</span> <span class="keyword">public</span> <span class="keyword">var</span> year: <span class="type">Int16</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// In case of nil collapsing, we can add</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> wrappedTitle:<span class="type">String</span> &#123;</span><br><span class="line">    title <span class="operator">??</span> <span class="string">&quot;Unknown Title&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">Movie</span> ：<span class="title class_">Identifiable</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Core data only load data when is actually needed (lazy load). This is good.</p><h2 id="L3-Conditional-saving-of-NSManagedObjectContext"><a href="#L3-Conditional-saving-of-NSManagedObjectContext" class="headerlink" title="L3: Conditional saving of NSManagedObjectContext"></a>L3: Conditional saving of NSManagedObjectContext</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">  <span class="meta">@Environment</span>(\. managedobjectContext) <span class="keyword">var</span> moc</span><br><span class="line">  <span class="keyword">var</span> body:<span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">Button</span>(<span class="string">&quot;Save&quot;</span>)&#123;</span><br><span class="line">      <span class="comment">// moc.hasChanges help us be sure about saving data only when changed</span></span><br><span class="line">      <span class="keyword">if</span> moc.hasChanges &#123;</span><br><span class="line">        <span class="keyword">try?</span> moc.save()</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="L4-Ensuring-Core-Data-objects-are-unique-using-constraints"><a href="#L4-Ensuring-Core-Data-objects-are-unique-using-constraints" class="headerlink" title="L4: Ensuring Core Data objects are unique using constraints"></a>L4: Ensuring Core Data objects are unique using constraints</h2><p>To make sure some specific attributes have unique values, add attribute name to <code>Constraints</code> in the right column. </p><h2 id="L5-Filtering-FetchRequest-using-NSPredicate"><a href="#L5-Filtering-FetchRequest-using-NSPredicate" class="headerlink" title="L5: Filtering @FetchRequest using NSPredicate"></a>L5: Filtering @FetchRequest using NSPredicate</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FetchRequest</span>(sortDescriptors: []， predicate: <span class="type">NSPredicate</span>(format:<span class="string">&quot;universe == &#x27;Star Wars&#x27; &quot;</span>)) <span class="keyword">var</span> ships: <span class="type">FetchedResults</span>&lt;<span class="type">Ship</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FetchRequest</span>(sortDescriptors: []， predicate: <span class="type">NSPredicate</span>(format:<span class="string">&quot;universe == %@ &quot;</span>, <span class="string">&quot;Star Wars&quot;</span>)) <span class="keyword">var</span> ships: <span class="type">FetchedResults</span>&lt;<span class="type">Ship</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Find all data whose inital character is before F in alphabet</span></span><br><span class="line"><span class="meta">@FetchRequest</span>(sortDescriptors: []， predicate: <span class="type">NSPredicate</span>(format:<span class="string">&quot;universe &lt; %@ &quot;</span>, <span class="string">&quot;F&quot;</span>)) <span class="keyword">var</span> ships: <span class="type">FetchedResults</span>&lt;<span class="type">Ship</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IN</span></span><br><span class="line"><span class="meta">@FetchRequest</span>(sortDescriptors: []， predicate: <span class="type">NSPredicate</span>(format:<span class="string">&quot;universe IN %@ &quot;</span>, [<span class="string">&quot;Aliens&quot;</span>,<span class="string">&quot;Firefly&quot;</span>])) <span class="keyword">var</span> ships: <span class="type">FetchedResults</span>&lt;<span class="type">Ship</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BEGINSWITH is Case sensitive, while BEGINSWITH[c] is not</span></span><br><span class="line"><span class="meta">@FetchRequest</span>(sortDescriptors: []， predicate: <span class="type">NSPredicate</span>(format:<span class="string">&quot;name BEGINSWITH %@ &quot;</span>, <span class="string">&quot;E&quot;</span>)) <span class="keyword">var</span> ships: <span class="type">FetchedResults</span>&lt;<span class="type">Ship</span>&gt;</span><br><span class="line"><span class="meta">@FetchRequest</span>(sortDescriptors: []， predicate: <span class="type">NSPredicate</span>(format:<span class="string">&quot;name BEGINSWITH %@ &quot;</span>, <span class="string">&quot;e&quot;</span>)) <span class="keyword">var</span> ships: <span class="type">FetchedResults</span>&lt;<span class="type">Ship</span>&gt;</span><br><span class="line"><span class="meta">@FetchRequest</span>(sortDescriptors: []， predicate: <span class="type">NSPredicate</span>(format:<span class="string">&quot;name BEGINSWITH[c] %@ &quot;</span>, <span class="string">&quot;e&quot;</span>)) <span class="keyword">var</span> ships: <span class="type">FetchedResults</span>&lt;<span class="type">Ship</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CONTAINS</span></span><br><span class="line"><span class="meta">@FetchRequest</span>(sortDescriptors: []， predicate: <span class="type">NSPredicate</span>(format:<span class="string">&quot;name CONTAINS[c] %@ &quot;</span>, <span class="string">&quot;e&quot;</span>)) <span class="keyword">var</span> ships: <span class="type">FetchedResults</span>&lt;<span class="type">Ship</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NOT</span></span><br><span class="line"><span class="meta">@FetchRequest</span>(sortDescriptors: []， predicate: <span class="type">NSPredicate</span>(format:<span class="string">&quot;NOT name CONTAINS[c] %@ &quot;</span>, <span class="string">&quot;e&quot;</span>)) <span class="keyword">var</span> ships: <span class="type">FetchedResults</span>&lt;<span class="type">Ship</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AND, OR</span></span><br></pre></td></tr></table></figure><h2 id="L6-Dynamically-filtering-FetchRequest-with-SwiftUI"><a href="#L6-Dynamically-filtering-FetchRequest-with-SwiftUI" class="headerlink" title="L6: Dynamically filtering @FetchRequest with SwiftUI"></a>L6: Dynamically filtering @FetchRequest with SwiftUI</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Parent View </span></span><br><span class="line"><span class="keyword">import</span> CoreData</span><br><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">  <span class="meta">@Environment</span>(\.managedObjectContext) <span class="keyword">var</span> moc</span><br><span class="line">  <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> lastNameFilter <span class="operator">=</span> <span class="string">&quot;A&quot;</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> body:<span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">VStack</span> &#123;</span><br><span class="line">      <span class="type">FilteredList</span>(filter: lastNameFilter)</span><br><span class="line">      </span><br><span class="line">      <span class="type">Button</span>(<span class="string">&quot;Change filter to S&quot;</span>)&#123;</span><br><span class="line">        lastNameFilter <span class="operator">=</span> <span class="string">&quot;S&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Child View</span></span><br><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FilteredList</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">  <span class="meta">@FetchRequest</span> <span class="keyword">var</span> fetchRequest: <span class="type">FetchedResults</span>&lt;<span class="type">Singer</span>&gt;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">List</span>(fetchRequest, id:\.<span class="keyword">self</span>)&#123;singer <span class="keyword">in</span></span><br><span class="line">      <span class="type">Text</span>(<span class="string">&quot;<span class="subst">\(singer.wrappedFirstName)</span> <span class="subst">\(singer. wrappedLastName)</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">init</span>(filter： <span class="type">String</span>)&#123;</span><br><span class="line">    <span class="comment">// The underscore is very essential</span></span><br><span class="line">    _fetchRequest <span class="operator">=</span> <span class="type">FetchRequest</span>&lt;<span class="type">Singer</span>&gt; (sortDescriptors: [], predicate:<span class="type">NSPredicate</span>(format: <span class="string">&quot;lastName BEGINSWITH %@&quot;</span>,filter))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To handle any kind of Entity and filters, use following codes:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Parent View </span></span><br><span class="line"><span class="keyword">import</span> CoreData</span><br><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">  <span class="meta">@Environment</span>(\.managedObjectContext) <span class="keyword">var</span> moc</span><br><span class="line">  <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> lastNameFilter <span class="operator">=</span> <span class="string">&quot;A&quot;</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> body:<span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">VStack</span> &#123;</span><br><span class="line">      <span class="type">FilteredList</span>(filterKey：<span class="string">&quot;lastName&quot;</span>, filterValue: lastNameFilter)&#123; (singer:<span class="type">Singer</span>) <span class="keyword">in</span></span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;<span class="subst">\(singer.wrappedFirstName)</span> <span class="subst">\(singer. wrappedLastName)</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="type">Button</span>(<span class="string">&quot;Change filter to S&quot;</span>)&#123;</span><br><span class="line">        lastNameFilter <span class="operator">=</span> <span class="string">&quot;S&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Child View</span></span><br><span class="line"><span class="keyword">import</span> CoreData</span><br><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FilteredList</span>&lt;<span class="title class_">T</span>: <span class="title class_">NSManagedObject</span>, <span class="title class_">Content</span>: <span class="title class_">View</span>&gt;: <span class="title class_">View</span> &#123;</span><br><span class="line">  <span class="meta">@FetchRequest</span> <span class="keyword">var</span> fetchRequest: <span class="type">FetchedResults</span>&lt;<span class="type">T</span>&gt;</span><br><span class="line">  <span class="keyword">let</span> content: (<span class="type">T</span>) -&gt; <span class="type">Content</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">List</span>(fetchRequest, id:\.<span class="keyword">self</span>)&#123;item <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">self</span>.content(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">init</span>(filterKey：<span class="type">String</span>, <span class="params">filterValue</span>: <span class="type">String</span>, <span class="meta">@ViewBuilder</span> <span class="params">content</span>: <span class="keyword">@escaping</span> (<span class="type">T</span>) -&gt; <span class="type">Content</span>)&#123;</span><br><span class="line">    <span class="comment">// The underscore is very essential</span></span><br><span class="line">    _fetchRequest <span class="operator">=</span> <span class="type">FetchRequest</span>&lt;<span class="type">T</span>&gt; (sortDescriptors: [], predicate:<span class="type">NSPredicate</span>(format: <span class="string">&quot;%K BEGINSWITH %@&quot;</span>,filterKey, filterValue))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="L7-One-to-many-relationships-with-FetchRequest-and-SwiftUI"><a href="#L7-One-to-many-relationships-with-FetchRequest-and-SwiftUI" class="headerlink" title="L7: One-to-many relationships with @FetchRequest and SwiftUI"></a>L7: One-to-many relationships with @FetchRequest and SwiftUI</h2><iframe width="560" height="315" src="https://www.youtube.com/embed/0QGt0THnlwU" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Core Data files </span></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">Country</span>&#123;</span><br><span class="line">   <span class="comment">// Omit some codes here</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// shortName must be unique in order to specify the relationship</span></span><br><span class="line">   <span class="keyword">@NSManaged</span> <span class="keyword">public</span> <span class="keyword">var</span> shortName:<span class="type">String</span>?</span><br><span class="line">   <span class="keyword">@NSManaged</span> <span class="keyword">public</span> <span class="keyword">var</span> candy: <span class="type">NSSet</span>?</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">var</span> candyArray: [<span class="type">Candy</span>]&#123;</span><br><span class="line">     <span class="keyword">let</span> <span class="keyword">set</span> <span class="operator">=</span> candy <span class="keyword">as?</span> <span class="type">Set</span>&lt;<span class="type">Candy</span>&gt; <span class="operator">??</span> []</span><br><span class="line">     </span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">set</span>.sorted&#123;</span><br><span class="line">       <span class="comment">// Remember to declare `wrappedName` in `Candy`</span></span><br><span class="line">       <span class="variable">$0</span>.wrappedName <span class="operator">&lt;</span> <span class="variable">$1</span>.wrappedName</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// View</span></span><br><span class="line"><span class="comment">// Please follow the video step by step</span></span><br></pre></td></tr></table></figure><hr><p><strong>Reference</strong></p><p>[Core data swiftui tutorial](<a href="https://www.youtube.com/@twostraws/search?query=&quot;core">https://www.youtube.com/@twostraws/search?query=&quot;core</a> data swiftui”)</p><ol><li><a href="https://youtu.be/vSHbMhy6XH4">Why does .self work for ForEach?</a></li><li><a href="https://youtu.be/pIAH3RVVXZE">Creating NSManagedObject subclasses</a></li><li><a href="https://youtu.be/K2BNOeA2G9k">Conditional saving of NSManagedObjectContext</a></li><li><a href="https://youtu.be/NZIlmRSB8l8">Ensuring Core Data objects are unique using constraints</a></li><li><a href="https://youtu.be/sh1lzhgsc64">Filtering @FetchRequest using NSPredicate</a></li><li><a href="https://www.youtube.com/watch?v=O4043RVjCGU&t=0s">Dynamically filtering @FetchRequest with SwiftUI</a> </li><li><a href="https://youtu.be/0QGt0THnlwU">One-to-many relationships with Core Data, SwiftUI, and @FetchRequest Challenges</a></li><li><a href="https://youtu.be/Yyd5NARCVcY">Core Data One to Many Relationship &amp; Core Data Delete Rules : SwiftUI</a></li></ol></div></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;tag-plugin tabs&quot; align=&quot;center&quot;id=&quot;tab_2&quot;&gt;&lt;div class=&quot;nav-tabs&quot;&gt;&lt;div class=&quot;tab&quot;&gt;&lt;a href=&quot;#tab_2-1&quot;&gt;中文&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;tab </summary>
      
    
    
    
    <category term="Coding Notes" scheme="http://deskside.github.io/categories/coding-notes/"/>
    
    
    <category term="Core Data" scheme="http://deskside.github.io/tags/core-data/"/>
    
    <category term="SwiftUI" scheme="http://deskside.github.io/tags/swiftui/"/>
    
  </entry>
  
  <entry>
    <title>SF symbol usage</title>
    <link href="http://deskside.github.io/2022/11/23/sfsymbol-usage/"/>
    <id>http://deskside.github.io/2022/11/23/sfsymbol-usage/</id>
    <published>2022-11-23T02:07:18.000Z</published>
    <updated>2023-02-10T02:32:46.674Z</updated>
    
    <content type="html"><![CDATA[<div class="tag-plugin tabs" align="center"id="tab_4"><div class="nav-tabs"><div class="tab"><a href="#tab_4-1">中文</a></div><div class="tab active"><a href="#tab_4-2">English</a></div></div><div class="tab-content"><div class="tab-pane" id="tab_4-1"><div class="tag-plugin note" color="red"><div class="title">请注意</div><div class="body"><p>技术类文章并不一定会进行中文翻译。如此文章无中文翻译，请移步英文界面阅读。</p></div></div><script src="https://gist.github.com/deskside/469fa0775f06597cb47a5db8ef3d2f4a.js"></script></div><div class="tab-pane active" id="tab_4-2"><div class="tag-plugin note" color="orange"><div class="title">Attention</div><div class="body"><p>SwiftUI only. For UIKit, please go to the reference. <br>Most features are only availble in iOS 15 or later.</p></div></div><h2 id="Why-SF-symbol"><a href="#Why-SF-symbol" class="headerlink" title="Why SF symbol"></a>Why SF symbol</h2><p>On Apple SF symbol website, many development-friendly advantages are addressed:</p><ul><li>With over 4,400 symbols in total, SF Symbols 4 features over 1000 new symbols, variable color, automatic rendering, and new unified layer annotation.</li><li>Symbols come in nine weights and three scales, and automatically align with text labels.</li><li>They can be exported and edited using vector graphics editing tools to create custom symbols with shared design characteristics and accessibility features.</li><li>Color can now be dynamically applied to system and custom symbols using a percentage value to convey strength or progress over time. </li><li>Many symbols use hierarchical rendering automatically for added depth and detail without needing to specify a rendering mode.</li><li>Custom symbols feature a shared layer structure across rendering modes making annotation faster and easier. Layer annotations can be viewed at a glance in the new preview area.</li></ul><p>In a word, SF symbols are so easy to use. We don’t even need to install anything in Xcode, they just come with SwiftUI.</p><p>Before getting started, you should download <a href="https://developer.apple.com/sf-symbols/">SF symbol app</a>. You don’t need it to render SF symbols in Xcode, but you would find it so convient for quick look-up and name-copy. </p><h2 id="Basic-usage"><a href="#Basic-usage" class="headerlink" title="Basic usage"></a>Basic usage</h2><p>To add a SF symbol in your SwiftUI app , simply write down:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Image</span>(systemName: <span class="string">&quot;externaldrive.badge.plus&quot;</span>)</span><br></pre></td></tr></table></figure><p>To create the most commonly seen icon-text view everywhere in your iPhone, simply write down:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Label</span>(<span class="string">&quot;Please try again&quot;</span>, systemImage: <span class="string">&quot;xmark.circle&quot;</span>)</span><br></pre></td></tr></table></figure><p>If you want to put SF symbol inside a line of text:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Text</span>(<span class="string">&quot;Please press the <span class="subst">\(Image(systemName: <span class="string">&quot;calendar&quot;</span>))</span> button&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Size-weight"><a href="#Size-weight" class="headerlink" title="Size, weight"></a>Size, weight</h2><p>You can adjust the size in either of the following ways:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Image</span>(systemName: <span class="string">&quot;airplane&quot;</span>)</span><br><span class="line">    .font(.largeTitle)</span><br><span class="line"></span><br><span class="line"><span class="type">Image</span>(systemName: <span class="string">&quot;house&quot;</span>)</span><br><span class="line">    .font(.system(size: <span class="number">72</span>))</span><br></pre></td></tr></table></figure><p>You can adjust the weight:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Image</span>(systemName: <span class="string">&quot;keyboard&quot;</span>)</span><br><span class="line">    .font(.largeTitle.weight(.black))</span><br></pre></td></tr></table></figure><h2 id="Color"><a href="#Color" class="headerlink" title="Color"></a>Color</h2><p>You can render a hierarchical SF Symbol like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Image</span>(systemName: <span class="string">&quot;square.stack.3d.down.right.fill&quot;</span>)</span><br><span class="line">    .symbolRenderingMode(.hierarchical)</span><br><span class="line">    .foregroundColor(.indigo)</span><br></pre></td></tr></table></figure><p>You can enable multicolor SF Symbols like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// iOS15 or later</span></span><br><span class="line"><span class="type">Image</span>(systemName: <span class="string">&quot;externaldrive.badge.plus&quot;</span>)</span><br><span class="line">    .symbolRenderingMode(.multicolor)</span><br><span class="line"></span><br><span class="line"><span class="comment">// iOS14</span></span><br><span class="line"><span class="type">Image</span>(systemName: <span class="string">&quot;externaldrive.badge.plus&quot;</span>)</span><br><span class="line">    .renderingMode(.original)</span><br></pre></td></tr></table></figure><h2 id="Adjustment"><a href="#Adjustment" class="headerlink" title="Adjustment"></a>Adjustment</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Image</span>(systemName: <span class="string">&quot;bell&quot;</span>)</span><br><span class="line">    .symbolVariant(.slash)</span><br><span class="line"></span><br><span class="line"><span class="type">Image</span>(systemName: <span class="string">&quot;bell&quot;</span>)</span><br><span class="line">    .symbolVariant(.square)</span><br><span class="line"></span><br><span class="line"><span class="type">Image</span>(systemName: <span class="string">&quot;bell&quot;</span>)</span><br><span class="line">    .symbolVariant(.fill.slash)</span><br></pre></td></tr></table></figure><p>There is also a <code>.none</code> option that renders the original image, which is helpful if you need to move between two states of the icon. For example, this flips a toggle between two states</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> showingAlerts <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Toggle</span>(isOn: <span class="variable">$showingAlerts</span>) &#123;</span><br><span class="line">            <span class="type">Label</span>(<span class="string">&quot;Show Alerts&quot;</span>, systemImage: <span class="string">&quot;bell&quot;</span>)</span><br><span class="line">                .symbolVariant(showingAlerts <span class="operator">?</span> .none : .slash)</span><br><span class="line">        &#125;</span><br><span class="line">        .toggleStyle(.button)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="VoiceOver"><a href="#VoiceOver" class="headerlink" title="VoiceOver"></a>VoiceOver</h2><p>Many SF Symbols have useful VoiceOver labels by default, such as “heart” being read out as “love” and “calendar.badge.plus” being read as “add to calendar.”</p><p>However, many other icons don’t have such built-in names, including complex icons such as “arrowshape.turn.up.backward.circle”. In these circumstances you should set a custom accessibility label describing the content for VoiceOver.</p><p>In SwiftUI, you attach a custom accessibility label to an SF Symbol like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Image</span>(systemName: <span class="string">&quot;arrowshape.turn.up.backward.circle&quot;</span>)</span><br><span class="line">    .accessibilityLabel(<span class="string">&quot;Go back&quot;</span>)</span><br></pre></td></tr></table></figure><p>If you’re using a label, VoiceOver will use your label’s text even if it isn’t currently being displayed.</p><p><strong>Tip:</strong> You can also place your accessibility label into your <code>Localizable.strings</code> file using the same name as the SF Symbol, and SwiftUI will use that instead.</p><h2 id="Adapt-to-context"><a href="#Adapt-to-context" class="headerlink" title="Adapt to context"></a>Adapt to context</h2><p>In iOS 15 and later many SF Symbols automatically adapt to how they are used, including the way the “signature” symbol changes to match various localizations such as Japanese or Hebrew.</p><p>However, SwiftUI has one power feature that UIKit lacks, which is the ability to render SF Symbols according to their context. This is most important inside <code>TabView</code>, where the correct variant of a symbol is system-dependent: on iOS Apple’s human interface guidelines recommend filled icons, whereas on macOS they recommend using strokes instead.</p><p>SwiftUI does something clever here: if you use an SF Symbol for a tab item, you <em>shouldn’t</em> specify whether it’s filled or not – it will automatically adapt based on the system.</p><p>So, this will create a tab item using a filled person symbol on iOS, but a stroked person on macOS:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TabView</span> &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Your View Here&quot;</span>)</span><br><span class="line">        .tabItem &#123;</span><br><span class="line">            <span class="type">Label</span>(<span class="string">&quot;Home&quot;</span>, systemImage: <span class="string">&quot;person&quot;</span>)</span><br><span class="line">                .symbolVariant(.none)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>Reference</strong></p><p><a href="https://www.hackingwithswift.com/articles/237/complete-guide-to-sf-symbols">The Complete Guide to SF Symbols – Hacking with Swift</a></p></div></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;tag-plugin tabs&quot; align=&quot;center&quot;id=&quot;tab_4&quot;&gt;&lt;div class=&quot;nav-tabs&quot;&gt;&lt;div class=&quot;tab&quot;&gt;&lt;a href=&quot;#tab_4-1&quot;&gt;中文&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;tab </summary>
      
    
    
    
    <category term="Coding Notes" scheme="http://deskside.github.io/categories/coding-notes/"/>
    
    
    <category term="Swift" scheme="http://deskside.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Xcode connection with GitHub in China</title>
    <link href="http://deskside.github.io/2022/11/22/xcode-connection-with-github-in-china/"/>
    <id>http://deskside.github.io/2022/11/22/xcode-connection-with-github-in-china/</id>
    <published>2022-11-21T16:00:00.000Z</published>
    <updated>2023-02-10T01:53:01.123Z</updated>
    
    <content type="html"><![CDATA[<div class="tag-plugin tabs" align="center"id="tab_5"><div class="nav-tabs"><div class="tab"><a href="#tab_5-1">中文</a></div><div class="tab active"><a href="#tab_5-2">English</a></div></div><div class="tab-content"><div class="tab-pane" id="tab_5-1"><p>对于中国大陆的开发者，无法顺利连接 Xcode 是常常令我们头疼不已的事。</p><p>此文可以解决即使打开 VPN 也无法顺利使得 Xcode 连接 Github 并 push commits 的问题。</p><p>在 Mac 的 AppStore 下载 <a href="https://apps.apple.com/cn/app/ihosts-etc-hosts-%E7%BC%96%E8%BE%91%E5%99%A8/id1102004240?mt=12">iHost</a>，「编辑」里面的 Host 文件，拷贝<a href="https://raw.hellogithub.com/hosts">此网站</a>的全部内容至其中（该网站的<a href="https://github.com/521xueweihan/GitHub520">GitHub Repo</a>页面在此，可以进去给作者打赏）。点击「应用」。</p><p><img src="https://user-images.githubusercontent.com/68626438/201594064-fc026418-344d-49c7-aa32-1761bc68e1ab.png"></p><p>搞定！</p><div class="tag-plugin note" color="yellow"><div class="title">注意</div><div class="body"><p>当网络环境变化的时候，比如切换 WiFi、开关 VPN、切换 VPN 节点，都会导致相关的 Host 网址变化，每次网络变化后，需要重复前述操作配置Host。</p></div></div><hr><p>参考文献：</p><p><a href="https://zhuanlan.zhihu.com/p/486712912#:~:text=GitHub%20%E9%93%BE%E6%8E%A5%E7%BC%93%E6%85%A2%E6%88%96%E8%80%85%E8%BF%9E%E4%B8%8D%E4%B8%8A%E5%A4%A7%E6%A6%82%E7%8E%87%E6%98%AF%20DNS%20%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E5%87%BA%E9%97%AE%E9%A2%98%E4%BA%86%EF%BC%8C%E8%A7%A3%E5%86%B3%E8%BF%99%E4%B8%80%E9%97%AE%E9%A2%98%E7%9A%84%E5%8A%9E%E6%B3%95%E5%B0%B1%E6%98%AF%E4%BF%AE%E6%94%B9%20hosts,%E6%96%87%E4%BB%B6%EF%BC%8C%E5%B0%86%20IP%20%E5%9C%B0%E5%9D%80%E7%9B%B4%E6%8E%A5%E4%B8%8E%E5%9F%9F%E5%90%8D%E5%AF%B9%E5%BA%94%E8%B5%B7%E6%9D%A5%EF%BC%8C%E8%B7%B3%E8%BF%87%E8%A7%A3%E6%9E%90%E8%BF%87%E7%A8%8B%EF%BC%8C%E4%BB%8E%E8%80%8C%E6%AD%A3%E5%B8%B8%E6%89%93%E5%BC%80%20github.com%20%E3%80%82">GitHub连不上的解决方案</a></p></div><div class="tab-pane active" id="tab_5-2"><p>For China mainland developer, the difficulty for connecting Github can’t be ignored.</p><p>Download <a href="https://apps.apple.com/cn/app/ihosts-etc-hosts-%E7%BC%96%E8%BE%91%E5%99%A8/id1102004240?mt=12">iHost</a> on Mac.</p><p>Edit the host file, add following code from <a href="https://raw.hellogithub.com/hosts">this site</a> (Checkout the <a href="https://github.com/521xueweihan/GitHub520">Github repo</a> of this site).</p><img width="752" alt="image" src="https://user-images.githubusercontent.com/68626438/201594064-fc026418-344d-49c7-aa32-1761bc68e1ab.png"><p>Boom! All set. You may now push code to Github smoothly in Xcode.</p><hr><p>Reference:</p><p><a href="https://zhuanlan.zhihu.com/p/486712912#:~:text=GitHub%20%E9%93%BE%E6%8E%A5%E7%BC%93%E6%85%A2%E6%88%96%E8%80%85%E8%BF%9E%E4%B8%8D%E4%B8%8A%E5%A4%A7%E6%A6%82%E7%8E%87%E6%98%AF%20DNS%20%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E5%87%BA%E9%97%AE%E9%A2%98%E4%BA%86%EF%BC%8C%E8%A7%A3%E5%86%B3%E8%BF%99%E4%B8%80%E9%97%AE%E9%A2%98%E7%9A%84%E5%8A%9E%E6%B3%95%E5%B0%B1%E6%98%AF%E4%BF%AE%E6%94%B9%20hosts,%E6%96%87%E4%BB%B6%EF%BC%8C%E5%B0%86%20IP%20%E5%9C%B0%E5%9D%80%E7%9B%B4%E6%8E%A5%E4%B8%8E%E5%9F%9F%E5%90%8D%E5%AF%B9%E5%BA%94%E8%B5%B7%E6%9D%A5%EF%BC%8C%E8%B7%B3%E8%BF%87%E8%A7%A3%E6%9E%90%E8%BF%87%E7%A8%8B%EF%BC%8C%E4%BB%8E%E8%80%8C%E6%AD%A3%E5%B8%B8%E6%89%93%E5%BC%80%20github.com%20%E3%80%82">GitHub连不上的解决方案</a></p><script src="https://gist.github.com/deskside/469fa0775f06597cb47a5db8ef3d2f4a.js"></script></div></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;tag-plugin tabs&quot; align=&quot;center&quot;id=&quot;tab_5&quot;&gt;&lt;div class=&quot;nav-tabs&quot;&gt;&lt;div class=&quot;tab&quot;&gt;&lt;a href=&quot;#tab_5-1&quot;&gt;中文&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;tab </summary>
      
    
    
    
    <category term="Coding Notes" scheme="http://deskside.github.io/categories/coding-notes/"/>
    
    
    <category term="GitHub" scheme="http://deskside.github.io/tags/github/"/>
    
    <category term="Xcode" scheme="http://deskside.github.io/tags/xcode/"/>
    
  </entry>
  
  <entry>
    <title>从今天开始写博客</title>
    <link href="http://deskside.github.io/2022/07/23/how-to-build-a-personal-blog/"/>
    <id>http://deskside.github.io/2022/07/23/how-to-build-a-personal-blog/</id>
    <published>2022-07-22T16:00:00.000Z</published>
    <updated>2023-02-10T01:51:25.692Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>在前几期 Newsletter 中，我向各位读者朋友介绍了我的<a href="https://deskside.github.io/">个人网站</a>，有读者朋友回信咨询如何建立，加上我也想要复盘一下心得和方法，因此就有了这篇文章。</p><p>于我而言，个人网站更像是一个自留地，不受各种算法的影响。我可以尽情地在这里发布、整理文章，不用担心干扰。</p><p>我的个人网站，实际上是「博客」。博客其实是一个互联网非常古早的产物了。在我读小学的时候，我舅舅就经常写新浪博客，甚至来我们家做客的时候，还要关心家里电脑能否联网给他看一下博客。</p><p>但随着互联网发展，博客这种「安静」的信息传递方式已经难以为企业赚钱了，企业纷纷转向了视频、公众号这种「聒噪」的方式，争夺用户的注意力。</p><p>这意味着两件事情：一是现在博客的关注度确实不高，二则是发展多年的博客，技术已经十分平民化了。事实上，无需高深的编程和代码知识，任何会操作电脑的人都能够跟着教程一步一步完成。</p><p>值得一提的是，我们在网上搜到的其他建站教程，有些会宣称「不用一行代码」。事实上，想在由计算机构成的互联网世界有一片自留地、又不依托任何社交平台，必然需要一定量的编程知识。</p><p>当然，如前所述，你不需要学过编程，掌握这些知识也不难。</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>事实上，我想先强调一些有关建站的基础：</p><ul><li>坚持写作、拍视频等创作能力。</li><li>使用外网的能力。</li><li>查阅（英文）文档的能力。</li></ul><p>这三个能力，我想缺一不可。关键在于，即使你现在没有也没关系。谁的能力不是慢慢强化得来的呢？我们会在一天天的发展中，逐渐获得并强化这些能力。我逐一解释：</p><p><strong>坚持创作</strong>。建站给人的感觉很酷，但是如果只有一个空壳的话，再酷也不会吸引人长久驻留。</p><p><strong>使用外网</strong>。无论是后文需要使用的 GitHub，还是大部分国际公认的优秀网站，如 Figma、Notion 等，基本都来自于欧美国家（这并非指中国大陆没有优秀的互联网产品）。个中原因不在此分析，只是从结果来看：我们如果不掌握使用外网的能力，将会错过互联网世界的绝大部分美景。</p><p><strong>查阅（英文）文档</strong>。文档通常是一个互联网产品的说明书。至于为什么需要英文能力，和第二点的原因类似，既然众多优秀网站和产品都来自于海外，那在语言上势必优先支持英文。况且，当我们遇到问题时，很多解决方案也是由英文写就的。</p><p>多嘴说一句，我遇到了很多人声称自己「英语不好」，听来只觉痛心。语言并非天堑鸿沟，退一万步说，我们每个人都至少熟练掌握了一门语言：中文（普通话或方言）。只要多运用，任何语言都会逐渐成为我们身体的一部分。因此，别再说自己英语不好了，不如说自己「英语暂时不熟悉，还需要多说多看」。</p><p>我并非计算机系，未经过系统的专业化训练。在以下教程中，可能会出现错误，还请海涵和指正。本文会同步发表于个人网站，如需更好的代码复制体验可以移步此处。</p><hr><p>在第一章的最后，我想分享编程区 up 主 Codesheep 在视频<a href="https://www.bilibili.com/video/BV1Yb411a7ty?spm_id_from=333.1007.top_right_bar_window_history.content.click">手把手教你从0开始搭建自己的个人博客</a>中说过的一句话：</p><blockquote><p>不要怕遇到问题，因为你一定会遇到问题。没关系，解决问题就好了。</p></blockquote><p>我在 2020 年的时候也曾经尝试建立个人博客，预期太高、以为会很顺利，结果一直不断遇到一些小问题，感觉受挫、没一会儿就放弃了。不久前刷到了技术博主的视频，这句话给了我很大的信心和勇气。</p><p>每个人的电脑配置、网络环境各有差异，你一定会遇到大大小小的问题。没关系，遇到问题就去寻找解决方案，逐个尝试后，解决掉就好了！</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>正常来说，以下安装过程适用于 Windows、macOS、Linux。</p><p>与网上能找到的绝大多数相似教程相比，我更想用一种诗意的比喻方式来我们可以将最终的网站成品类比为「一个装饰精美的储物盒，盒子里装着一沓纸」。</p><h3 id="打造工作台：构筑环境"><a href="#打造工作台：构筑环境" class="headerlink" title="打造工作台：构筑环境"></a>打造工作台：构筑环境</h3><p>首先，构筑环境。我们需要一个「工作台」来加工和维护储物盒。如果我们的工作间是我们的电脑，那工作台便是 <a href="https://nodejs.org/en/">Node.js</a> 和 <a href="https://git-scm.com/download/win">Git</a> 。你不需要理解它们的原理，但我们需要在电脑里安装它们。</p><p>请分别点击链接进入二者的官网，网页一般会默认提供适配当前电脑的下载选项。</p><ul><li>Node.js 请选择左边的绿色方框下载。</li><li>Git 请选择 Standalone Installer 中的 64-bit Git for Windows Setup（如果你知道自己的电脑是 32 位版本，请选择 32-bit Git for Windows Setup）。</li></ul><h3 id="找到好工具：使用终端"><a href="#找到好工具：使用终端" class="headerlink" title="找到好工具：使用终端"></a>找到好工具：使用终端</h3><p>有了工作台，有了目标，我们还需要一个趁手的扳手来执行操作。无论是什么系统，每台电脑都提供了这个扳手，那就是「<a href="https://sspai.com/post/45534">终端</a>」。</p><p>终端实际上是我们与电脑「直接沟通」的中介，平常我们用电脑时的各种软件其实是我们与电脑「间接沟通」的中介。</p><p>终端无需额外下载，你可以在搜索中（Windows 中敲击 win+s，macOS 中敲击 command+space）输入终端二字打开。你可以考虑<a href="https://docs.microsoft.com/zh-cn/powershell/scripting/install/installing-powershell?view=powershell-7.2">在 Windows、Linux 和 macOS 上安装 PowerShell</a>，对 Windows 用户的体验优化很明显。</p><p>终端实际上是在特定文件夹内的操作，因此在你的输入位置前总是有一行文件路径名。因此，有两个命令很重要。（#号后面为注释内容，请不要在终端中输入#号后面的内容，下同）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd folderName #进入名为folderName的子文件夹中</span><br><span class="line">cd..          #返回上级文件夹</span><br></pre></td></tr></table></figure><h3 id="先打造外框：博客框架"><a href="#先打造外框：博客框架" class="headerlink" title="先打造外框：博客框架"></a>先打造外框：博客框架</h3><p>一个储物盒，如果没有稳定的框架，势必会散架。对于博客而言，框架便是 <a href="https://hexo.io/zh-cn/index.html">Hexo</a> 。</p><p>Hexo 自 2012 年发布以来，已经稳定提供服务 10 年，由台北人陳嘉輝（Tommy Chen）编写。基本上，如果你想要搭建博客，框架不是选择 Hexo 便就是 Hugo，足以证明其强大。</p><p>与我们日常安装软件不同，Hexo 的安装只需要一行代码即可。但是，在哪里输入代码呢？</p><p>我们可以在任意位置新建文件夹，右键菜单中选择「在终端中打开」。以下所有代码，每一行输入后需敲击一次 Enter 键。</p><p>在弹出的窗口中，我们逐行输入以下代码，检查工作台是否搭建好了（检查 Node.js 和 Git 是否安装好了）。如果分别出现一行版本号，即安装完毕。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v #检查node版本</span><br><span class="line">npm -v  #检查npm版本</span><br></pre></td></tr></table></figure><p>由于国内网络环境限制，电脑访问外网通常非常缓慢。我们需要将工作台改为中国大陆版本（即更改镜像源）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>紧接着，确认工作台无误后，我们便可以先打造好博客框架了（安装Hexo）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>我们同样需要检查我们的博客框架是否打造好了（检查Hexo安装情况）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><h3 id="开始造盒子：建储物盒"><a href="#开始造盒子：建储物盒" class="headerlink" title="开始造盒子：建储物盒"></a>开始造盒子：建储物盒</h3><p>框架已经完成，意味着我们拥有了建储物盒的模具。我们便可以使用模具来创建第一个储物盒。</p><p>你可以在你电脑的任意位置新建文件夹，既然我们要建立个人博客，那就起名「blog」吧！随后，在「blog」文件夹内，右键菜单中选择「在终端中打开」。以上操作，你也可以在终端中输入以下代码代替：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog      # 初始化创建，会在你所在位置创建 blog 文件夹</span><br><span class="line">cd blog             # 进入 blog 目录</span><br><span class="line">npm install         # 进一步安装hexo所需文件</span><br></pre></td></tr></table></figure><p>稍等一会儿，略显粗糙的第一个储物盒就建好了！</p><p>什么，你没看到？仔细看看刚才的文件夹，里面应该出现了不少文件。这些配置文件便构筑起了我们的储物盒。回到终端里，继续输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean          # 清除所有记录</span><br><span class="line">hexo generate       # 生成静态网页</span><br><span class="line">hexo s              # 启动服务，默认端口号是4000</span><br></pre></td></tr></table></figure><p>接下来，我们使用浏览器打开 <a href="http://localhost:4000/">http://localhost:4000/</a> ，便可以看到一个默认的储物盒了。</p><h3 id="自定义外观：博客主题"><a href="#自定义外观：博客主题" class="headerlink" title="自定义外观：博客主题"></a>自定义外观：博客主题</h3><p>我们都喜欢好看的东西，对于网站亦如此。随着 Hexo 这么多年的发展，来自全球的开发者已经为其创造了 <a href="https://hexo.io/themes/">300 多个风格各异的主题</a>，足够让你挑花眼。</p><p>你可以随意浏览。点击图片可以进入该主题的范例网站，点击标题可以进入该主题的 GitHub 页面。GitHub 页面中一般会写明安装方法和配置要求。实际上，安装方法无外乎两种：</p><p>第一种，在 GitHub 页面中点击蓝色的 Code 按钮，选择「Download ZIP」，下载包含该主题所有代码的文件。解压后放入我们的「blog」文件夹中的「themes」中（下文将使用「blog&#x2F;themes」表达相同意思）。</p><p>第二种，在使用一行代码，从终端直接同步该主题的所有代码。通常在博客的Github页面都会写明如何安装。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone xxx themes/yyy</span><br><span class="line"># xxx通常为该Github页面的网址</span><br><span class="line"># yyy通常为该Hexo主题的名字</span><br></pre></td></tr></table></figure><p>值得注意的是，如果你遇到了 GitHub 访问很慢、无法git clone的情况，你可以采取「曲线救国」的策略。Gitee 是国内类似 Github 的代码托管网站，注册后，在「+」中选择「从 Github&#x2F;Gitlab 中导入仓库」，输入你想要的Github网址。</p><p>安装好之后的下一步，是配置。即在各个主题提供的范围内进行自定义。每个主题都各有不同，在这里无法逐一介绍。请发挥前述提到的第三个能力，根据主题的 GitHub 中的 README 文档，完成该任务吧！</p><p>值得强调的是，丰富的主题其实是一把双刃剑，好处是我们可以为网站精挑细选主题，但坏处便是我们很容易深陷其中、舍本逐末。好的网站，最重要的并不是外观，而是内容。如果没有扎实、吸引人的内容，访客的鼠标只会快速点击「关闭」键，和你说再见。</p><p>我的<a href="https://deskside.github.io/">个人网站</a>目前看起来非常有模有样，很大一部分原因是我已经在前期有了长足的文章积累。在完成前面的步骤之后，我其实只需要将文章复制粘贴生成即可，</p><h3 id="向世界发布：部署网站"><a href="#向世界发布：部署网站" class="headerlink" title="向世界发布：部署网站"></a>向世界发布：部署网站</h3><p>部署（deploy），听起来很高级，但是我们可以理解为将博客从本地发布到云端，让我们可以通过一行网址访问。</p><p>由于该部分内容并不难，请参阅<a href="https://easyhexo.com/1-Hexo-install-and-config/1-4-deploy-hexo.html#%E9%83%A8%E7%BD%B2%E5%88%B0-github">部署 Hexo | Easy Hexo 👨‍💻</a>的教程进行配置。</p><p>出于安全性考虑，GitHub 应该会要求用户提供 SSHkey，你可以理解为电脑和 GitHub 之间的「暗号」，请参阅<a href="https://www.runoob.com/w3cnote/view-ssh-public-key.html">查看本机 ssh 公钥，生成公钥</a>。</p><p>值得一提的是，我并不推荐你部署到国内代码托管网站，如 Gitee。不推荐的理由是老生常谈了：审查机制。以 Gitee 为例，每一次网址重新发布，用户都必须进入 Gitee 手动点击部署，十分麻烦。除此之外，Gitee 会使用机器以不明朗的规则审查文字，十分正常的内容也可能被判定违规、不予部署。</p><p>当然，Gitee 的（唯一）好处是国内访问速度很快。相比之下，GitHub 作为真正开源的国际网站，在国内访问速度并不稳定。请自行斟酌考量部署网站的选择。</p><p>如果你具有更强的能力可以将博客部署到自己的服务器、域名之上，那自然是再好不过了。即便没有，使用 GitHub 等网站提供的部署服务也非常方便优雅。</p><h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><h3 id="我怎么写"><a href="#我怎么写" class="headerlink" title="我怎么写"></a>我怎么写</h3><p>所有的博客文章，我们都可以在本地的<code>博客文件夹名字/source/_post</code>中看到，并且会以 <code>.md</code>格式存在，md 是 markdown 的缩写。</p><p>如果你完全不知道 markdown 是什么，那么你必须先阅读<a href="https://sspai.com/post/25137">认识与入门 Markdown</a>，了解 markdown 的常用语法。别担心，这不仅学起来很简单，学会之后，也会让我们以后的文字处理都变得简单起来。</p><p>如果你对常用 markdown 语法有所遗忘，请随时查阅<a href="https://markdown.com.cn/cheat-sheet.html#%E6%80%BB%E8%A7%88">Markdown 语法速查表</a>。</p><p>如果你想选择一款好用的 markdown 编辑器，你可以在这些<a href="https://markdown.com.cn/tools.html#%E7%BC%96%E8%BE%91%E5%99%A8">Markdown 工具</a>中进行选择。当然，电脑自带的纯文本工具（即记事本或文本编辑）其实也完全足以编辑，只不过无法对你写下来的 markdown 语法进行即时渲染。</p><p>当你想要新建一篇文章时，你可以二选一：</p><ul><li>直接在前述文件夹中右键新建md文件，并编辑其中的内容。</li><li>使用终端命令 <code>hexo new post xxx</code>，xxx为博客网址名。</li></ul><h3 id="基础信息"><a href="#基础信息" class="headerlink" title="基础信息"></a>基础信息</h3><p>每篇 hexo 文章都会需要一个 front-matter，用以告知这篇文章的基础信息是什么。通常而言，「标题、日期、标签、分类」即足矣。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: xxx</span><br><span class="line">date: 2022-7-23</span><br><span class="line">tag: [a,b,c]</span><br><span class="line">categories: yyy</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>如果你还想了解更多，请参阅<a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter | Hexo</a>。值得注意的是，每个主题通常都会提供一些特殊的信息用以配置 front-matter，你通常可以在主题的 GitHub 页面中找到配置指南。</p><h3 id="多台电脑"><a href="#多台电脑" class="headerlink" title="多台电脑"></a>多台电脑</h3><p>如果你拥有两台及以上的电脑，希望每台电脑上你都可以编辑博客内容并发布，你可以参阅<a href="https://www.jianshu.com/p/4bcf2848b3fc">多台电脑使用Hexo</a>。过程很简单，因此在此不再复述。</p><h2 id="彩蛋：插入-B-站或-YouTube-视频"><a href="#彩蛋：插入-B-站或-YouTube-视频" class="headerlink" title="彩蛋：插入 B 站或 YouTube 视频"></a>彩蛋：插入 B 站或 YouTube 视频</h2><h3 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h3><p>绝大部分的 Hexo 主题，都支持通过一行复制粘贴的代码嵌入 B 站或 YouTube 的视频，非常适合视频创作者来构建自己的个人网站。那么，这行神奇的代码从哪里复制来呢？</p><p>很简单，用浏览器打开任意你想要嵌入的视频，找到分享按钮里的「嵌入」键，拷贝由 B 站或 YouTube 提供的这行代码，并将这行代码粘贴到博客文章中去。当然，不只限于这两个视频网址，任何提供嵌入代码的视频网站都可以。</p><p>重新渲染博客后，打开对应页面，你就可以看到一个可以直接在网页内点击播放的视频了！</p><h3 id="时分跳转"><a href="#时分跳转" class="headerlink" title="时分跳转"></a>时分跳转</h3><p>涉及视频插入的场景，我们常常会想要指明几分几秒。比如我们想要插入一个教程，但我们想特别注明只需从第 2 分 30 秒开始看就好了。那我们应该如何操作呢？</p><p>对于 Youtube 视频，非常简单，嵌入功能原生支持设置时间节点。我们只需要在嵌入界面设置「2:30」或「150」即可，前者为几分几秒，后者为秒数，二者等效。</p><p>对于B站视频，则显得稍微麻烦些许。我们需要在提供的代码中的「src」引号内的最后添加上「&amp;t&#x3D;02m30s」。如果视频有多个分p，你可以添加「p&#x3D;2&amp;t&#x3D;02m30s」，用以表示跳转至第2部分的第2分30秒。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># B站提供的视频嵌入代码</span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;//player.bilibili.com/player.html?aid=291374696&amp;bvid=BV1uf4y1b7R8&amp;cid=360416569&amp;page=1&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># 在「src」引号内的最后添加「&amp;t=02m30s」</span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;//player.bilibili.com/player.html?aid=291374696&amp;bvid=BV1uf4y1b7R8&amp;cid=360416569&amp;page=1&amp;t=02m30s&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="宽高调整"><a href="#宽高调整" class="headerlink" title="宽高调整"></a>宽高调整</h3><p>在具体的网页渲染中，我们还可以指明播放器的宽度和高度。</p><p>无论是 YouTube 还是 B 站提供的播放器，我们都可以在第一个括号内加上一段代码，这样子我们便可以自定义播放器的宽高了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 添加宽高参数以前</span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;//player.bilibili.com/player.html?aid=291374696&amp;bvid=BV1uf4y1b7R8&amp;cid=360416569&amp;page=1&amp;t=02m30s&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># 添加宽高参数以后，注意每个参数之间需要有空格</span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;//player.bilibili.com/player.html?aid=291374696&amp;bvid=BV1uf4y1b7R8&amp;cid=360416569&amp;page=1&amp;t=02m30s&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>你可以输入两种类型的值来定义宽或高：</p><ul><li>百分比，即播放器占浏览器的百分比。如「width&#x3D;”100%”」。</li><li>纯数字，即像素值。如「height&#x3D;”300”」。</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>到此为止，我的一个小梦想已经圆了：建立个人网站。</p><p>于我而言，在互联网上有一个自己的域名，打开后装满了自己设计和书写的内容，带来的成就感和满足感还是很强的。</p><p><strong>接下来，就是你创作的过程了！</strong></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://www.bilibili.com/video/BV1Yb411a7ty?spm_id_from=333.1007.top_right_bar_window_history.content.click">手把手教你从0开始搭建自己的个人博客</a></li><li><a href="https://www.jianshu.com/p/4bcf2848b3fc">多台电脑使用Hexo</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;在前几期 Newsletter 中，我向各位读者朋友介绍了我的&lt;a href=&quot;https://deskside.github.io/&quot;&gt;个</summary>
      
    
    
    
    <category term="Coding Notes" scheme="http://deskside.github.io/categories/coding-notes/"/>
    
    
    <category term="GitHub" scheme="http://deskside.github.io/tags/github/"/>
    
    <category term="Hexo" scheme="http://deskside.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>三年健身回顾</title>
    <link href="http://deskside.github.io/2022/07/13/workout-review/"/>
    <id>http://deskside.github.io/2022/07/13/workout-review/</id>
    <published>2022-07-12T16:00:00.000Z</published>
    <updated>2023-02-10T01:54:10.507Z</updated>
    
    <content type="html"><![CDATA[<p>从2019-8-1开始算起的话，至今健身已经快三年了。在此总结和分析一下这三年的经验教训。</p><p><strong>这三年的训练情况：</strong></p><ul><li>因为这三年中途断断续续有停止的情况，所以训练并不是很连贯。</li><li>三年都没有去健身房，我并不是很想去健身房练，一是想省钱，二是更喜欢在家里锻炼、觉得去健身房很麻烦，三是恰逢毕业、工作换城市，开卡并不是一个很好的选择。我在家和宿舍都有可更换重量的哑铃。</li><li>感觉还是不太有章法，训练起来比较草率，也缺乏目的性、计划性。</li><li>睡眠质量、时长不太有保障，而且2021年全年经常熬夜，导致皮肤状况和健身效果都不太好。</li><li>虽然想要控制饮食，但基本上没做到。主要因为我经常外出就餐导致卡路里计算很麻烦。</li></ul><p><strong>到目前为止的训练效果：</strong></p><ul><li>因为最初训练的时候缺乏目的性，因此在这里可以分类讨论一下。<ul><li>如果以保持健康和正常体态为目的，比较成功，这几年成功地瘦了下来，而且一直维持在65kg左右的体重。</li><li>如果以爱上运动为目的，比较成功，运动三年，一方面更自信了，一方面更喜欢运动或健身了，身体素质也有提升，平时也会</li><li>如果以六块腹肌为目的，不太成功，腹部脂肪堆积比较严重，腹部没有减下去。</li><li>如果以全身增肌为目的，不太成功，除了腹部，大腿后侧脂肪堆积很严重，明显软塌塌的一大块，以及手臂的肌肉线条也出不来。</li></ul></li></ul><p><strong>下一阶段的计划：</strong></p><ul><li>之前一直试图自己记录健身数据，但是总是因为太过复杂或繁琐而放弃，今天购买了训记App，希望下一阶段能用好。</li><li>控制饮食应该还是最重要的事情。</li><li>提早睡眠。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;从2019-8-1开始算起的话，至今健身已经快三年了。在此总结和分析一下这三年的经验教训。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这三年的训练情况：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因为这三年中途断断续续有停止的情况，所以训练并不是很连贯。&lt;/li&gt;
&lt;li&gt;三年都没有</summary>
      
    
    
    
    <category term="Health Notes" scheme="http://deskside.github.io/categories/health-notes/"/>
    
    
    <category term="健身" scheme="http://deskside.github.io/tags/%E5%81%A5%E8%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>Solved - zsh command not found (macOS)</title>
    <link href="http://deskside.github.io/2022/07/08/zsh-command-not-found/"/>
    <id>http://deskside.github.io/2022/07/08/zsh-command-not-found/</id>
    <published>2022-07-07T16:00:00.000Z</published>
    <updated>2023-02-10T01:50:45.464Z</updated>
    
    <content type="html"><![CDATA[<p>因为需要制作个人网站和文档，我电脑中需要安装 node.js（包含 npm）和 git。</p><p>顺利安装后，运行如下指令，使用 npm 安装 hexo 和 docsify 都没有问题，十分顺利。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">npm i docsify-cli -g</span><br></pre></td></tr></table></figure><h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><p>但是，在安装完成后，准备开始使用 hexo 和 docsify 的时候，所有相关指令都无法使用，终端会给出如下错误。（请注意我使用的是 macOS 系统）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 假如我运行 docsify 相关指令</span><br><span class="line">docsify init</span><br><span class="line">zsh command not found:docsify</span><br><span class="line"></span><br><span class="line"># 假如我运行 hexo 相关指令</span><br><span class="line">hexo s</span><br><span class="line">zsh command not found:hexo</span><br></pre></td></tr></table></figure><p>我在网上查了好久，但那是相关的解决措施都很「高级」……作为一个编程小白，我真的很茫然，完全看不懂。</p><p>所幸在一番折腾后，我终于解决了这个问题。接下来我将解决方案和过程分享给你，希望能发挥效果。</p><h2 id="理解Terminal、Shell"><a href="#理解Terminal、Shell" class="headerlink" title="理解Terminal、Shell"></a>理解Terminal、Shell</h2><p>首先，我们需要理解zsh是什么，以及有什么用。（没错，我连这个都不知道是什么！）</p><p>zsh全名为Z-shell，本质即是Shell。听起来很复杂，别着急，请继续看。</p><p>我们日常在使用电脑的时候，比如聊微信、打游戏、看网页，实际上是通过开发者设计好的用户界面（User Interface, UI）在与电脑交互，是一种间接沟通方式，但胜在图文并举、直观易懂。</p><p>但如果我们想要更直接地与电脑交互，我们便需要另一个工具，这便是终端（Terminal）。终端可以直接与计算机的内核（Kernel）沟通，是一种直接沟通方式，但往往需要具备一定的计算机知识，否则看到纯文字的界面会很茫然。</p><p>终端想要与计算机沟通时，不能直接与内核沟通，否则一旦用户错误操作，整个计算机就会崩溃。因此，我们还需要一个中介，用来接受用户输入的命令，并由其与内核沟通，这便是Shell（壳层）。</p><p>Shell有很多种，比如bash、csh、tcsh等，你会发现它们都以shell的缩写「sh」结尾。</p><p>因此，前述终端中报错，实际上是zsh在告诉我们：「虽然你用npm安装了相关程序，但是我找不到呀，你得告诉我文件路径在哪里哦！」</p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>既然理解了问题，那我们就可以着手开始解决问题。</p><p>首先，我们需要找到zsh的配置文件，在终端中输入以下指令应该能打开：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open ~/.zshrc</span><br></pre></td></tr></table></figure><p>如果终端反馈找不到该文件，或者有错，请你使用Finder打开用户文件夹（我的文件夹为joeysimac），并按下<code>command+shift+.</code>，显示隐藏文件夹。如果你不知道你的用户文件夹路径是多少，请重启终端并输入以下指令，终端会告诉你当前路径。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br><span class="line"># 我的程序返回了如下指令</span><br><span class="line">/Users/joeysimac</span><br></pre></td></tr></table></figure><p>打开文件后，应该会有一行大致如下的文字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$HOME/bin:/usr/local/bin:$PATH</span><br></pre></td></tr></table></figure><p>其中以<code>:</code>断开的便是不同的<code>/bin路径</code>，请记住这几个不同的路径，接下来可能会用到。</p><p>因为 macOS 从 Catalina 版开始，其默认 shell 从 bash 改为 zsh。因此，你需要找到<code># User configuration</code>，在其下方加入一行代码，告知zsh「之前bash的相关配置你可以用哦」。最终效果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># User configuration</span><br><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>其次，我们需要知道刚刚通过npm全局安装好的程序（以hexo为例），它现在具体在什么地方。</p><p>因为我是使用npm安装的，所以通常而言，安装好的程序应该会在<code>/Users/joeysimac/.npm-global/bin</code>这个文件夹中。</p><p>因此，我们需要将hexo现在的位置<code>/Users/joeysimac/.npm-global/bin/hexo</code>告诉zsh。请将下列路径替换为你自己的路径，然后在终端中输入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s 你的程序路径 /bin路径</span><br><span class="line"># 示例：sudo ln -s /Users/joeysimac/.npm-global/bin/hexo /usr/local/bin</span><br></pre></td></tr></table></figure><p>如果发生错误，请尝试将<code>/bin路径</code>更换为前述的其他路径。</p><p>最后，为了使配置文件立刻生效，我们需要在终端中输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><p>到此为止，你可以试着重启终端，试着运行相关程序。依旧以hexo为例，逐行敲入下列代码，看看终端是否能正常运行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h2 id="复盘"><a href="#复盘" class="headerlink" title="复盘"></a>复盘</h2><p>这是我第一次撰写技术向文章，因为我本身并非计算机专业，也未系统学习过编程，单纯只是感兴趣，算是纯小白了。无论学习哪种语言，学习编程的道路都不会一帆风顺。</p><p>遇到问题卡壳了，那就尝试转换心情去完成别的任务吧，很多难题往往在散步的过程中灵感迸发就解决了，或者睡一觉之后脑子就想通了。</p><p>从积极的角度而言，遇到问题说明我们有了收获新知识的可能性，这难道不可喜可贺吗！</p><hr><p>参考文献：</p><ul><li><a href="https://blog.csdn.net/u010954988/article/details/80404329#:~:text=%22%20zsh%3A%20command%20not%20found%3A%20%22%E8%BF%99%E4%B8%AA%E9%94%99%E8%AF%AF%E7%9B%B8%E4%BF%A1%E5%A4%A7%E5%AE%B6%E9%83%BD%E4%B8%8D%E9%99%8C%E7%94%9F%EF%BC%8C%E4%BB%A5%E5%89%8D%E6%AF%8F%E6%AC%A1%E9%81%87%E5%88%B0%E8%BF%99%E4%B8%AA%E9%97%AE%E9%A2%98%E9%83%BD%E6%98%AFGoogle%E4%B8%80%E4%B8%8B%EF%BC%8C%E7%84%B6%E5%90%8E%E5%91%8A%E8%AF%89%E4%BD%A0%E5%9C%A8,xxx%20%E6%96%87%E4%BB%B6%E6%B7%BB%E5%8A%A0%20xxx%20%E6%96%87%E5%AD%97%EF%BC%8C%E6%88%96%E8%80%85%E5%9C%A8Terminal%E8%BF%90%E8%A1%8C%20xxx%20%E5%91%BD%E4%BB%A4%E5%8D%B3%E5%8F%AF%EF%BC%8C%E6%9C%89%E4%BA%9Bwork%EF%BC%8C%E6%9C%89%E4%BA%9B%E4%B8%8D%E8%A1%8C%E3%80%82">zsh: command not found from CSDN</a></li><li><a href="https://blog.csdn.net/qq_33833327/article/details/78086973">Mac ln命令报错：Operation not permitted</a></li><li><a href="https://www.jianshu.com/p/a891af6f87e0">shell有哪些？Zsh和Bash的区别是什么？</a></li><li><a href="https://sspai.com/post/45534">玩转 Terminal 终端：入门指南及进阶技巧</a></li><li><a href="https://www.cnblogs.com/sddai/p/9769086.html">命令行界面 (CLI)、终端 (Terminal)、Shell、TTY的区别 - stardsd - 博客园 (cnblogs.com)</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;因为需要制作个人网站和文档，我电脑中需要安装 node.js（包含 npm）和 git。&lt;/p&gt;
&lt;p&gt;顺利安装后，运行如下指令，使用 npm 安装 hexo 和 docsify 都没有问题，十分顺利。&lt;/p&gt;
&lt;figure class=&quot;highlight plaint</summary>
      
    
    
    
    <category term="Coding Notes" scheme="http://deskside.github.io/categories/coding-notes/"/>
    
    
    <category term="Terminal" scheme="http://deskside.github.io/tags/terminal/"/>
    
  </entry>
  
  <entry>
    <title>一起来打破日记吧！</title>
    <link href="http://deskside.github.io/2022/07/03/break-traditional-diary/"/>
    <id>http://deskside.github.io/2022/07/03/break-traditional-diary/</id>
    <published>2022-07-02T16:00:00.000Z</published>
    <updated>2023-02-10T02:46:24.161Z</updated>
    
    <content type="html"><![CDATA[<p>你还记得初高中那段时间的小心思吗？</p><p>那些对喜欢的人小心翼翼的关注，害怕被同学孤立或讨厌的忧心，害怕自己进步得太慢的焦虑……所有的小心思都在身体里翻涌，在夜色下辗转，在阳光下焦灼。作为学生，我们大多会选择一种成本最低的方式，将这些心绪排解——写日记。</p><p>或许，只有当偶尔打开装满了初高中旧物的盒子时，我们才会意识到初高中时的自己每天有多少心绪在涌动。于我而言，我有好几个大开本的本子都被写满了，那些细碎、隐秘又青涩的想法就这么被沉淀下来。彼时的我，大部分的心思都不敢付诸实践，更不敢与人言说，但总归需要一个出口将其宣泄。</p><p>无独有偶，现在B站有一类视频很多博主都在做，那就是「翻阅当年的同学录&#x2F;日记」。一方面，和小时候的自己相比，绝大多数人都成长了很多，当年的那些烦恼大多已付笑谈，岁月给人带来的变化让人着迷。</p><p>另一方面，人类是记忆的生物。似乎当年龄迈过 20 的坎后，我们都开始喜欢「追忆当年」了。每次朋友聚会总是会聊到往事，而每次聊到又都会让大家开怀一笑。</p><h2 id="当日记不再是日记"><a href="#当日记不再是日记" class="headerlink" title="当日记不再是日记"></a>当日记不再是日记</h2><p>我妈时常鼓励我多写日记，因为「不写下来就会忘了」。长期以来，我对日记的态度也大致如此。</p><p>在写日记这件事上，我并没能长期坚持，但也并非半途而废，要找一个词来形容，那或许就是「间歇性写日记」吧！</p><p>我总是隔一段时间就会对写日记热情高涨，每天都会抽出时间来写日记，但是在保持记录一段时间后又会消沉下去，接着又进入下一次循环。</p><p>究其原因，我想，这或许是我对「日记」的刻板印象在作祟。</p><p>我总认为写日记就像写流水账，要尽量事无巨细地将自己从早到晚的活动都追踪到位。可想而知，纯粹的流水账十分耗时，一天的流水账至少得写20分钟；不仅如此，流水账写起来很无聊、读起来更无聊，甚至还不如小学生日记有意思，写完之后，大多数人再也不会翻开。</p><p>因此，如果只是为了「记住事情」，流水账日记未免显得有些无用功了。日记必须是对今天的追踪记录吗？</p><hr><p>除了写日记之外，我还是一个狂热的记录爱好者。我喜欢追踪和记录很多东西：睡眠状况、财务流水、健身内容、看过的书、观过的影、和对象的日常、情绪变化、小成就、便便情况。总之，只要我感兴趣，我就会试着将其记录下来。</p><p>随着记录的内容、种类变多，我逐渐发现「日记」只是记录自己的一种方式，或许和发朋友圈、微博、即刻、flomo、视频 vlog 等类似，只是形式不同，但更有隐私。</p><p>换言之，我们没有必要「将鸡蛋装在同一个篮子里」。试着打破固有认知，日记不必只有一种形式，它为什么不可以是多种形式的集合呢？</p><h2 id="打破传统日记的限制"><a href="#打破传统日记的限制" class="headerlink" title="打破传统日记的限制"></a>打破传统日记的限制</h2><p>在我的理解中，传统日记大概会有如下特征：一天一篇、流水化记录、每天挑固定时间写……</p><p>如此，传统日记很难不显得呆板、费时又无趣。想要打破传统日记，其实非常简单：那就是要想清楚自己为什么要记录日记。这实际上便是要求自己想清楚：我希望通过「写日记」给自己带来什么好处？</p><p>因此，如果你能从纯粹的记录中获得乐趣，那么即使你写完后再也不打开日记本，也没有关系。在这种情况下，写日记的目的已经达到了，不是吗？</p><p>根据自己的需求，我们便可以将传统日记打破成任意「形状」。自己想要记录什么，就将记录的内容视为「今天的日记」的一个组成部分。</p><p>比如，小桌子是一位健身爱好者，他有个专门的本子对健身进行记录，而且他每天都会拍下自己的三餐发朋友圈，他每天还会在给对象发消息，告诉他自己今天做了什么。那么，我们不妨就把小桌子的日记看成「健身记录本+餐饮记录朋友圈+聊天记录里的行程动态」。小桌子不必再专门在晚上腾出时间来写日记，任何一天他想要回溯自己的生活，他只需要在这三者中检索一番，便能还原个八九不离十。</p><hr><p>到此为止，这篇文章的使命似乎已经完成了。</p><p>但是，关于「如何写日记」或者说「如何成为更好的自己」，我还有想要分享的经验。记录是用图文音视频的方式，将我们的生活固定下来的过程。</p><p>我现在大概会有如下三种日记。每一种都允许碎片化的记录，当你想写的时候就可以动动手指，不用等到深夜身心俱疲只想睡觉的时候才动笔。而且我相信这三种日记形式会对你很有帮助。</p><h3 id="情绪日记：观察自己"><a href="#情绪日记：观察自己" class="headerlink" title="情绪日记：观察自己"></a>情绪日记：观察自己</h3><p>生而为人，「情绪」是我们的重要组成部分。对于积极情绪，我们总是趋之若鹜。但对于消极情绪，我们似乎总试图压制和否定它们。</p><p>如果对心理学有一些了解，我们便会知道，无论是正面还是负面情绪，我们都应该直面它、顺其流动，不应该压制在心底。否则久而久之，情绪的积压便会以更强的合力引爆出更大的问题。</p><p>面对情绪，将自己视为「一个忠实的观察者」或许是很好的选择。像旁观者一样客观、冷静地观察自己的情绪起伏，并记住一定不要对自己做出评价，诸如「我情绪这么糟糕，真的好差劲」这样的想法只会对自己百害而无一利。在<a href="https://deskside.github.io/post/fogg-behavioural-models">成长的关键不是自我鞭策，而是正确的方法</a>中，我分享了《福格行为模型》中一句「反常识」的话，却让我感到醍醐灌顶：</p><blockquote><p>不要自我批评，因为人们在感觉良好的状态下改变，效果最佳。</p></blockquote><p>如果你对这样做的效果表示质疑，我想说「记录本身即是抵抗」，对情绪的记录本身就是舒缓情绪的过程。</p><p>如果你有更深层次的质疑，比如「我为什么要花时间关注自己的情绪」。我想，无论你如何否定，情绪都是对人的行为影响很大的因素，对情绪的控制能力影响着一个人处事的水平，而对情绪的感知能力决定着我们能在多大程度上控制好情绪。</p><p>实话说，我自己就不是一个能够很好地控制情绪的人。这并不是说我常常会在别人面前失控（如暴怒、大哭等），而是说，我很容易让情绪影响到自己行为和心态。一旦情绪走低，我的所有行动都会陷入瘫痪，但又不是一种休息或放松，这种心理瘫痪的状态反而比正常的学习工作还要疲累。</p><p>值得一提的是，控制情绪不等于压制情绪。正如控制体重不等于疯狂减重一样，我们的目标是在控制自己的情绪在合理范围内波动。</p><p>那么，既然要做一个忠实的观察者，最好的方式或许就是记录情绪日记了：把一天内的情绪的起起落落都如实记录下来。</p><p>现在有很多 App 也会关注情绪问题，但大多都只以天为单位关注。例如，这类 App 往往通过一个月历图，展示一个月每一天的单个情绪。这便带来了一个问题：到了晚上，我不知道应该为今天选择哪一种情绪。</p><p>因为，随着遇到的事情不同，我一天内可能会经历「平静、焦虑、喜悦、悲伤、愤怒」等情绪中的不止一个情绪，像是波浪起伏、有高有低。如果要我选择唯一的情绪作为今天的象征，那我应该选波峰还是波谷呢？因此，我会觉得这种记录方式违背了「忠实记录情绪」的原则。<img src="https://s2.loli.net/2022/07/02/ItB6oPS1RV8vjel.jpg"></p><p>事实上，你根本不需要 App。仅仅一个方格本或横线本就足够了。</p><p>我目前暂时将自己的情绪分为平静、焦虑、喜悦、悲伤、愤怒，你可以用英文首字母 P、J、H、S、A 来代表各个情绪。你也可以根据自己的实际情况，思考自己容易出现什么样的情绪。</p><p>在本子每一页的每一根横栏上，先写下日期，再用 5 个格子区分上午、中午、下午、傍晚、深夜，每天根据情绪填入对应时间段就好啦。</p><p>你还可以做出更多 DIY 或更有创意的设计。比如，我拿了 5 根彩色铅笔，用颜色涂满对应格子，这样既直观美观，又简洁简单。</p><p><img src="https://s2.loli.net/2022/07/02/XhYFftGqDNsecal.jpg" alt="https://s2.loli.net/2022/07/02/XhYFftGqDNsecal.jpg"></p><h3 id="积极日记"><a href="#积极日记" class="headerlink" title="积极日记"></a>积极日记</h3><p>在治愈系美剧<a href="https://deskside.github.io/post/this-is-us">《我们这一天》</a>中，有一次，爸爸 Jack 独自带着三个熊孩子出门逛街。但是，中午看电影的时候，老大趁爸爸睡着，偷偷溜出去闲逛、走丢了。爸爸带着剩下的两个孩子慌慌张张找了好久。所幸，妈妈 Rebecca 提前在孩子鞋舌处留了电话号码，很快就在警察局将老大带回了家。</p><p>Jack 和 Rebecca 带着孩子们回到了家。虽然到家了，但三个孩子都因为走丢事件，感到慌张和不安。Jack 自责不已，深感自己毁了孩子的一天。Rebecca 不仅没有责怪他，反而告诉他「只要孩子们还没上床睡觉，今天就没有结束，你依然可以改变孩子们对今天的看法」。</p><p>于是，晚上的时候，Jack 发明了新的家庭游戏，成功逗孩子们开心，最后孩子们上床时脸上挂着温暖的笑容，白天的恐慌已被夜晚的美好所稀释。</p><p>孩子们如此，作为成年人的我们亦然。</p><p>我在上一期<a href="https://deskside.github.io/post/talk-with-bf-about-family">我和好朋友的聊天：童年的伤痛像一根掰不断的倒刺</a>中，讨论到我在某些事情上偏悲观态度，这会大幅影响「专注当下」的能力，进而让我难以「享受当下」。</p><p>比如，如果我和朋友出门游玩一天，我早上出发时的热情与喜悦，到了下午往往就会变成对「快乐的时光总是这么短暂」的忧伤。随后的时间里，我很有可能沉浸在类似的想法里，始终像是「身处众人间，心游离在外」。</p><p>我希望自己能以更积极的态度专注每一天的生活，不要总是试图分析意义。因此，我开始写一种新的日记「积极日记」。</p><p>每天晚上，洗澡前或临睡前，我要写下至少三件今天发生的让我感到愉悦、感恩或开心的事情，无论多么微不足道都可以。哪怕只是朋友陪我一起聊天，哪怕只是今天的天空很湛蓝，只要能让自己感到积极情绪，就值得记录。</p><p>在形式上，这或许最接近传统日记。但区别在于：我只允许自己关注遇到的让自己感觉不错的事件，将注意力放到事物的积极一面。而且形式更轻量，不用繁琐重述，只需要简单列明就好了。</p><p>积极日记虽然不是什么灵丹妙药，但如果能长期坚持下来，应该会引导我以更积极的视角迎接生活中的挑战，并且享受生活中哪怕最微小的乐趣。</p><h3 id="碎片记录：聊天记录、照片、动态"><a href="#碎片记录：聊天记录、照片、动态" class="headerlink" title="碎片记录：聊天记录、照片、动态"></a>碎片记录：聊天记录、照片、动态</h3><p>如前所述，既然「日记」的定义被打破了，那我们也不必拘泥于「日记必须成文」的想法了。</p><p>互联网的发展让沟通变得简便，因此也更频繁。以我和我的对象为例，我们一天中绝大多数行程和动态，都会通过微信告知对方。因此，如果我们俩想不起来某一天做了什么，往往翻一翻聊天记录就能得到答案。</p><p>因此，聊天记录本质上就是一种日记。虽然相比起以前的流水账日记而言，查找起来没那么方便，但这也免去了我们写日记的功夫，不是吗？</p><hr><p>同理，技术发展让照片也变得更加好用。</p><p>我很喜欢 iPhone 相簿的桌面小组件，系统每天都会为我选择一些照片陈列上来，每每看到都会有小惊喜的感觉。</p><p>在 iPhone 相簿里，「回忆」和「精选照片」也很棒，会按照地点、时间或人物来为我整理照片，还会直接生成带有配乐的小视频，让分享变得很简单。</p><p>最重要的是，照片所承载的不仅仅是一幅画面。在照片详情页，你可以一目了然地看到照片拍摄的精确时间和地点，而这一切都是在按下快门的一瞬间发生的。如此种种，不都是日记吗？</p><hr><p>当然，即使有了如上种种，我的倾诉欲（分享欲、表达欲）依然还有一部分：零零碎碎的小思绪。这些可能是吐槽别人，可能是暗恋猜想，还可能是一些不容易被接受的想法……</p><p>「社死现场：被熟人发现了我的微博」是一个之前热度很高的话题，正是因为很多人会把自己不愿告诉别人但又需要有宣泄口的小心思记录在微博。一旦被熟人发现，必然像是被「扒了内裤」一样羞耻和尴尬。在少数派，甚至有极客会自建一个微博，专门用来记录自己的碎碎念。</p><p>我自己使用 flomo 来承载这部分作用。一方面，flomo 的设计十分接近微博或朋友圈，无论是界面还是云同步，用起来都很有感觉；另一方面，flomo 免费用户的纯文字存储无限量，让人不必担心资费的问题。</p><p>你不一定要选择 flomo。我曾经跟我的朋友推荐过，但是她依然选择微博，因为她仍然希望自己发的内容能被陌生人看到或有一定的公开曝光。如果你也如此，那任何你喜爱的社交平台都可以成为你的「日记本」。</p><h2 id="让自己重新爱上日记"><a href="#让自己重新爱上日记" class="headerlink" title="让自己重新爱上日记"></a>让自己重新爱上日记</h2><p>将传统的流水账日记打破，分成多种不同的日记形式。不再一昧追求统一，而是根据自己的需求选择不同的日记，让记录发挥出更多元、更深入、更长久的效果。</p><p>我想，这样子的话，或许能让我自己、也能让你重新爱上记录生活吧！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;你还记得初高中那段时间的小心思吗？&lt;/p&gt;
&lt;p&gt;那些对喜欢的人小心翼翼的关注，害怕被同学孤立或讨厌的忧心，害怕自己进步得太慢的焦虑……所有的小心思都在身体里翻涌，在夜色下辗转，在阳光下焦灼。作为学生，我们大多会选择一种成本最低的方式，将这些心绪排解——写日记。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="Life Thoughts" scheme="http://deskside.github.io/categories/life-thoughts/"/>
    
    
    <category term="人生" scheme="http://deskside.github.io/tags/%E4%BA%BA%E7%94%9F/"/>
    
    <category term="焦虑" scheme="http://deskside.github.io/tags/%E7%84%A6%E8%99%91/"/>
    
    <category term="写作" scheme="http://deskside.github.io/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>一起来东湖边看日出</title>
    <link href="http://deskside.github.io/2022/06/21/go-and-see-the-dawn/"/>
    <id>http://deskside.github.io/2022/06/21/go-and-see-the-dawn/</id>
    <published>2022-06-20T16:00:00.000Z</published>
    <updated>2023-02-10T02:43:50.553Z</updated>
    
    <content type="html"><![CDATA[<p>武汉大学北边的东湖浩浩汤汤，作为广州人的我第一次来到这里的时候，有被震撼到。</p><p>前几天，我被新认识的朋友妄为凌晨五点拉着来东湖边看日出，还是非常快乐的。我还在朋友圈写了一首小诗：</p><p>地平线的乌云高如城墙期待消沉了下去<br>结果人山人海被一场小小雨冲走了大半<br>接下来的栈桥就归愿意等待的人拥有了<br>太阳冲过乌云城墙的最高处变成鹅蛋黄</p><p>妄为说的一句话，也被我记住了——「来都来了，日出已经不重要了」。这句话似乎还隐藏着人生哲学的意味。</p><p>（以下图片均来自妄为之手，不得不夸！）</p><p><img src="https://s2.loli.net/2022/06/29/XKMC5LQsznNdTlp.png"></p><p><img src="https://s2.loli.net/2022/06/29/pGdiMDZqEUu8olK.png"></p><p><img src="https://s2.loli.net/2022/06/29/zCeRc3thoMLQw1a.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;武汉大学北边的东湖浩浩汤汤，作为广州人的我第一次来到这里的时候，有被震撼到。&lt;/p&gt;
&lt;p&gt;前几天，我被新认识的朋友妄为凌晨五点拉着来东湖边看日出，还是非常快乐的。我还在朋友圈写了一首小诗：&lt;/p&gt;
&lt;p&gt;地平线的乌云高如城墙期待消沉了下去&lt;br&gt;结果人山人海被一场小小雨冲</summary>
      
    
    
    
    <category term="Life Log" scheme="http://deskside.github.io/categories/life-log/"/>
    
    
    <category term="自然" scheme="http://deskside.github.io/tags/%E8%87%AA%E7%84%B6/"/>
    
    <category term="小确幸" scheme="http://deskside.github.io/tags/%E5%B0%8F%E7%A1%AE%E5%B9%B8/"/>
    
  </entry>
  
  <entry>
    <title>心静自然凉的时刻</title>
    <link href="http://deskside.github.io/2022/06/13/calm-down-and-cool-down/"/>
    <id>http://deskside.github.io/2022/06/13/calm-down-and-cool-down/</id>
    <published>2022-06-12T16:00:00.000Z</published>
    <updated>2023-02-10T02:46:07.213Z</updated>
    
    <content type="html"><![CDATA[<p>我是一个很怕热的人，一旦我感到燥热和汗湿，我的身体就会很难受、精神状态也会变差。</p><p>前几天刚到武汉的时候，天气很闷热。因为武汉多湖，水汽足，武汉白天的热总给人一种焖蒸的感觉。恰逢正午太阳凌空，我刚刚在外面走了一圈，身上已经有一层黏糊糊的汗，脑袋困乏，整个人燥热不安。</p><p>因为朋友在忙，我一个人（被迫）坐在没有空调没有风扇的客厅里。我又出去走了走，想找个咖啡厅坐一坐，却觉得咖啡厅的冷气很弱，不想坐下来。最后兜兜转转，又走回了朋友家的客厅，我坐在那里，打开电脑，开始做一些不会让自己心烦意乱的事情。</p><p>慢慢地，我似乎就感觉不那么热了，一切似乎在心平气和中都变得和缓了下来。虽然依旧闷热，但是似乎不怎么出汗了，心态也不那么燥热不安了。这或许就是所谓的心静自然凉吧，一种由心态引发的身体上的变化。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我是一个很怕热的人，一旦我感到燥热和汗湿，我的身体就会很难受、精神状态也会变差。&lt;/p&gt;
&lt;p&gt;前几天刚到武汉的时候，天气很闷热。因为武汉多湖，水汽足，武汉白天的热总给人一种焖蒸的感觉。恰逢正午太阳凌空，我刚刚在外面走了一圈，身上已经有一层黏糊糊的汗，脑袋困乏，整个人燥热不</summary>
      
    
    
    
    <category term="Life Thoughts" scheme="http://deskside.github.io/categories/life-thoughts/"/>
    
    
    <category term="健康" scheme="http://deskside.github.io/tags/%E5%81%A5%E5%BA%B7/"/>
    
    <category term="自然" scheme="http://deskside.github.io/tags/%E8%87%AA%E7%84%B6/"/>
    
  </entry>
  
  <entry>
    <title>写作陷入瓶颈期</title>
    <link href="http://deskside.github.io/2022/06/04/stuck-as-creator/"/>
    <id>http://deskside.github.io/2022/06/04/stuck-as-creator/</id>
    <published>2022-06-03T16:00:00.000Z</published>
    <updated>2023-02-10T02:41:40.749Z</updated>
    
    <content type="html"><![CDATA[<p>最近，我的创作开始进入了瓶颈期。</p><p>一方面，我觉得自己的写作内容过于零散和碎片，虽然我一直围绕着几个核心主题在写作，但由于每一期内容都是由来自不同主题的碎片组成的，久而久之便显得不够完整和一体。</p><p>之后我会考虑在不同的写作形式之间轮换，即单篇长文、碎片文章集合等。</p><p>另一方面，我的写作冲动开始衰竭。其实，我一直不太相信「热爱可抵岁月漫长」，因为人的生理结构决定了：只凭热爱，是不足以和喜新厌旧的多巴胺抗衡的。</p><p>当然，我更相信「正确的方法可抵岁月漫长」。无论是适当的休息、更改或扩大关注范围，还是如前所述运用微习惯的方法将写作融入日常流程等，我觉得都值得实践。</p><p>以及，正是因为我和各位读者朋友们约定好了「每周六上午见面」，才让我每周都必须鞭策自己坐在电脑桌前，打下千来字，与各位分享我的思考。</p><p>最后，我个人的写作形式偏说理和逻辑，换言之，我的文章缺乏故事的张力。这种写作方式与我个人喜好有关，我喜欢阅读社科作品胜过小说，我更崇尚严谨的逻辑。但是，故事的魅力依然影响着每一个人，生而为人，我们更容易被一则生动的故事吸引，更容易被一则形象的故事说服，更容易从一则有趣的故事开始理解复杂的事物。</p><p>我希望自己能够开始锻炼写故事的能力，但是或许这并不容易，我从小到大更多是一位倾听者，听我的朋友讲述有趣的故事，而非一位讲述者。因此，如果之后的文章中出现蹩脚的故事叙述，也希望各位多加忍耐，如果你能提供一些改进建议就更好了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近，我的创作开始进入了瓶颈期。&lt;/p&gt;
&lt;p&gt;一方面，我觉得自己的写作内容过于零散和碎片，虽然我一直围绕着几个核心主题在写作，但由于每一期内容都是由来自不同主题的碎片组成的，久而久之便显得不够完整和一体。&lt;/p&gt;
&lt;p&gt;之后我会考虑在不同的写作形式之间轮换，即单篇长文、碎</summary>
      
    
    
    
    <category term="Creator Log" scheme="http://deskside.github.io/categories/creator-log/"/>
    
    
    <category term="写作" scheme="http://deskside.github.io/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>我什么也没干，只是在好好活着</title>
    <link href="http://deskside.github.io/2022/05/26/essay-about-depressive-mood/"/>
    <id>http://deskside.github.io/2022/05/26/essay-about-depressive-mood/</id>
    <published>2022-05-25T16:00:00.000Z</published>
    <updated>2023-02-10T02:44:46.452Z</updated>
    
    <content type="html"><![CDATA[<p>我首先被《<a href="https://mp.weixin.qq.com/s/btV7AG9cWpHRGywReUL4ew">我什么也没干，只是在好好活着 | 和抑郁情绪共处的315天</a>》开篇的这句话吸引了，让我一下子就对作者产生了好感：</p><blockquote><p>我没有得抑郁症，更不想为这个饱受污名化的群体增加一个数字。我只是情绪生病了，人人都会经历的，再正常不过的现象。</p></blockquote><p>我们都喜欢真诚而善良的人，即使受到抑郁情绪困扰，也尽力避免为他人尤其是备受争议和关注的群体造成困扰，这样的作者怎么会不让人喜欢呢？</p><p>我在之前的 Newsletter 中曾经提到，丰满的细节令人着迷，尤其是身处低谷期的部分。我们都是人，意味着我们必定会经历生命周期的起起伏伏，没有人可以像社交媒体上的照片一样永葆光彩夺目。</p><p>他人的故事往往蕴含着让我们思考和前行的力量。对于我而言，最让我受到启迪的部分来自于她如何思考「与父母的关系」。毕竟，父母是对每个人影响最大的人。</p><blockquote><p>不久之后我回家，我们再次因为相似问题爆发了争吵。我疲倦于他们无止境的误解，想当然的给我下定义。在争吵的过程中，我一边哭一边大声喊，我已经离职了，我已经3个月没有上班了，我骗了你们3个月。……当我说出来那一刻，我明白，父母的理解不再重要了。我一直以来希望达到一种彼此理解的状态，即使是假的，是扮演的，我也贪恋这种平和气氛。我是你们心中的好孩子，而你们赞美我、鼓励我，做我的好爸妈。我畏惧不理解，我害怕关系里的倒刺，我希望每段关系都平滑流畅、和和气气。</p></blockquote><blockquote><p>如今我好像可以平静地接受——我们不用互相理解。我们是家人，我们相亲相爱，有困难时会第一时间互相帮助，但我们不必真的理解对方想做什么。不必再去一遍遍解释。今后的人生，我们必然秉承着完全不同的价值观，不同的行事风格，活成两种样子。不如就此把“彼此说服、统一观念”搁置，我们一起吃饭，旅游，聊八卦聊生活，看电影逛街，我们有更好的、超越“彼此理解”的相处模式。在我明白这件事后，我突然变得轻松起来。</p></blockquote><p>具体的细节不再过多分享了，作者的笔墨让阅读过程轻松而沉浸。最后，援引作者的话送给每一位读者：</p><blockquote><p>治愈的过程如此漫长而绞痛，因而每一刻都值得铭记。我要记下它们。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我首先被《&lt;a href=&quot;https://mp.weixin.qq.com/s/btV7AG9cWpHRGywReUL4ew&quot;&gt;我什么也没干，只是在好好活着 | 和抑郁情绪共处的315天&lt;/a&gt;》开篇的这句话吸引了，让我一下子就对作者产生了好感：&lt;/p&gt;
&lt;blockqu</summary>
      
    
    
    
    <category term="Exhibition" scheme="http://deskside.github.io/categories/exhibition/"/>
    
    
    <category term="人生" scheme="http://deskside.github.io/tags/%E4%BA%BA%E7%94%9F/"/>
    
    <category term="焦虑" scheme="http://deskside.github.io/tags/%E7%84%A6%E8%99%91/"/>
    
    <category term="心理学" scheme="http://deskside.github.io/tags/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
    <category term="抑郁" scheme="http://deskside.github.io/tags/%E6%8A%91%E9%83%81/"/>
    
  </entry>
  
  <entry>
    <title>哪怕是初学者，也要勇敢分享</title>
    <link href="http://deskside.github.io/2022/05/21/be-brave-to-share/"/>
    <id>http://deskside.github.io/2022/05/21/be-brave-to-share/</id>
    <published>2022-05-20T16:00:00.000Z</published>
    <updated>2023-02-10T02:46:38.557Z</updated>
    
    <content type="html"><![CDATA[<p>不知道读者朋友们是否曾有过这样子的感觉：</p><p>在事情没有尘埃落定之前，我不敢和别人分享自己的想法、思考和态度。因为，我害怕最后的结果证明我是错的、没用的、胡说八道的。</p><p>这其实是我自己长期以来都有的一种感受，我害怕将自己处于风险之中——一种可能会被人反驳、遭人嘲笑、受人批评的风险。因此，我宁愿息声屏气，将任何经验都埋藏在心底里。</p><p>有人规定过「初学者不得分享」吗？并没有。</p><p>有人规定过「失败者不得分享」吗？并没有。</p><p>有人规定过「从未分享过的人不得分享」吗？并没有，这种思维甚至是一种悖论。</p><p>事实上，当我们看很多现在取得成功的人，分享他们成长历程的时候，最迷人的部分往往不是他们登上顶峰、光芒四射的那一霎那，而是在攀爬过程中的不停摔倒、受挫、自我怀疑，那些黎明前的黑暗映射出了我们所有人共有的迷茫和困惑。</p><p>现在，无人不知乔布斯打造的苹果帝国，但翻开《乔布斯传》，你看到的、感兴趣的是有关他年轻时的偏执、暴躁和迷茫，是他被董事会逼迫离开苹果时的愤怒和迷茫，是他在做出一个又一个两难的商业决定前的思索。</p><p>同样地，无人不知米歇尔·奥巴马，曾经的美国第一夫人。但翻开《成为》，你看到的、感兴趣的是她与丈夫踏上政坛之前，忙忙碌碌的律所生活，主动选择放弃高薪律师职业的纠结和烦恼，选举演讲和照顾女儿两难全的烦忧。</p><p>作为初学者，分享思考的意义，很大一部分在于获得支持和帮助，还有一部分则在于忠实记录自己的成长。写下这段话的契机，主要是我在担心我应不应该分享「老妈对谈」给读者朋友们，这显然会暴露我们的家庭问题，但我却觉得这是一些很不错的参考经验。</p><p>我们无法保证自己十几年后会获得什么样的成就，但每一次对自己成长过程的记录和思考，都给「成为更好的自己」投下了坚定的一票，不是吗？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;不知道读者朋友们是否曾有过这样子的感觉：&lt;/p&gt;
&lt;p&gt;在事情没有尘埃落定之前，我不敢和别人分享自己的想法、思考和态度。因为，我害怕最后的结果证明我是错的、没用的、胡说八道的。&lt;/p&gt;
&lt;p&gt;这其实是我自己长期以来都有的一种感受，我害怕将自己处于风险之中——一种可能会被人反</summary>
      
    
    
    
    <category term="Creator Log" scheme="http://deskside.github.io/categories/creator-log/"/>
    
    
    <category term="勇气" scheme="http://deskside.github.io/tags/%E5%8B%87%E6%B0%94/"/>
    
    <category term="写作" scheme="http://deskside.github.io/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>做一个完美的蒸水蛋</title>
    <link href="http://deskside.github.io/2022/05/21/make-steamed-egg/"/>
    <id>http://deskside.github.io/2022/05/21/make-steamed-egg/</id>
    <published>2022-05-20T16:00:00.000Z</published>
    <updated>2023-02-10T02:38:51.844Z</updated>
    
    <content type="html"><![CDATA[<p>蒸水蛋一直是一种又简单又困难的食物。</p><p>简单之处在于，蒸水蛋的原材料太简单了，鸡蛋、清水、酱油、几滴香油足矣。但是困难之处在于，水蛋比例、火候控制需要很精准，否则要么会变成蒸蛋汤，要么会变成皱巴巴的丑蛋羹。</p><p>最近，我和我妈共同尝试了好多次，终于测试出了比较完美的蒸水蛋方案，在这里与大家分享。</p><ul><li>一个干净的容器。不干净的容器会让蛋液里有空气。</li><li>先打蛋，用筷子将蛋打发至稀状，尽量没有固形物。</li><li>按水蛋1:1的比例加入纯净水，继续用筷子打发至汤状。</li><li>稍微静置几分钟，让蛋液里的空气排出。</li><li>上蒸锅内，初始水温为热水。蒸锅加盖，盛蛋的碗不加盖。</li><li>隔水蒸10分钟，开盖滴香油和酱油，大功告成！</li></ul><p><img src="https://s2.loli.net/2022/06/29/7K64wgSrmUsZOY1.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;蒸水蛋一直是一种又简单又困难的食物。&lt;/p&gt;
&lt;p&gt;简单之处在于，蒸水蛋的原材料太简单了，鸡蛋、清水、酱油、几滴香油足矣。但是困难之处在于，水蛋比例、火候控制需要很精准，否则要么会变成蒸蛋汤，要么会变成皱巴巴的丑蛋羹。&lt;/p&gt;
&lt;p&gt;最近，我和我妈共同尝试了好多次，终于测试</summary>
      
    
    
    
    <category term="Life Log" scheme="http://deskside.github.io/categories/life-log/"/>
    
    
    <category term="小确幸" scheme="http://deskside.github.io/tags/%E5%B0%8F%E7%A1%AE%E5%B9%B8/"/>
    
    <category term="美食" scheme="http://deskside.github.io/tags/%E7%BE%8E%E9%A3%9F/"/>
    
  </entry>
  
  <entry>
    <title>智齿拔牙保姆级教程</title>
    <link href="http://deskside.github.io/2022/05/16/wisdom-teeth/"/>
    <id>http://deskside.github.io/2022/05/16/wisdom-teeth/</id>
    <published>2022-05-15T16:00:00.000Z</published>
    <updated>2023-02-10T01:51:18.478Z</updated>
    
    <content type="html"><![CDATA[<div class="tag-plugin note" color="red"><div class="title">请注意</div><div class="body"><p>本教程仅适用于门诊拔牙，如需住院拔牙请咨询医生。</p></div></div><h2 id="拔牙前"><a href="#拔牙前" class="headerlink" title="拔牙前"></a>拔牙前</h2><ul><li>拔牙前请向医生说明身体状况，是否患有心肺、血液、肝脏等疾病；是否有药物过敏。如为女性患病者，则需向医生说明是否月经期或怀孕。一般而言，女生月经期间不推荐拔牙。</li><li>如果现在正处于智齿发炎期，如脸部肿胀，则无法拔牙，须等待消炎。</li><li>拔牙前一般医生会让你去拍片，以便看清智齿生长状况、是否为阻生牙、智齿与脸部神经的关系等。牙科医院内一般都有拍片机器，不用担心。</li><li>体质容易出血或感染的同学可以提前服用头孢，但最好咨询医生后服用。</li><li>上班的同学最好提前请假1-2天，连着周末一起，这样子能有比较长的休息期。</li></ul><h2 id="拔牙中"><a href="#拔牙中" class="headerlink" title="拔牙中"></a>拔牙中</h2><ul><li>挂号一般为口腔颌面外科。</li><li>请尽量前往当地最好的口腔医院。</li><li>个人推荐下午拔牙，中午饭一定要尽可能吃饱，拔牙前喝多一点水，因为拔牙后2小时内都不能喝水。</li><li>不推荐上午拔牙的原因是拔牙后最好能保持4-5小时内不进食，让创口处不受刺激为佳，而上午拔完牙基本就午饭时间了，会很容易过于饥饿。</li><li>拔牙不痛！因为打了麻药，一般只会有微微的刺感。</li><li>拔牙过程请配合医生的指令。</li><li>拔牙费用视智齿拔除难度而定。我因为下牙难度较大，上下两颗总共花费1600元。</li><li>如果可以的话，尽量邀请一人陪同就诊。有朋友或家人陪伴会更安心一些。</li><li>一般可以上下两颗智齿一起拔，国外有很多医生甚至会选择四颗同时拔除。</li><li>如果你很想要自己拔下来的牙齿，可以在术后和医生索要。但是注意此为医疗废物，带回家后务必清洗消毒干净，不得随意丢弃。</li></ul><h2 id="拔牙后"><a href="#拔牙后" class="headerlink" title="拔牙后"></a>拔牙后</h2><h3 id="伤口注意事项篇"><a href="#伤口注意事项篇" class="headerlink" title="伤口注意事项篇"></a>伤口注意事项篇</h3><ul><li>放在创口上的纱卷或棉球，需紧紧咬住30分钟后才能吐去。</li><li>24小时内唾液里有少量血液属正常现象，术后一周内口腔内有血丝也是正常现象。</li><li>麻醉消失后（约1-2小时），创口会略有疼痛，一般无需服药。若有发热、疼痛剧烈，肿胀或大量出血则应及时就诊。</li><li>如拔牙创口有缝线，请于一周后拆线。</li><li>需安装义齿者，大约拔牙后2个月即可做修复。</li></ul><h3 id="伤口可能情况篇"><a href="#伤口可能情况篇" class="headerlink" title="伤口可能情况篇"></a>伤口可能情况篇</h3><ul><li>拔牙后可能会发生：<ul><li>肿胀：可能发生面部、颌下、咽喉部肿胀。一般2-7天会恢复，如未及时恢复请就医。</li><li>出血：可能发生面部皮下、咽喉部粘膜下淤血。</li><li>疼痛：可能向耳颞部放射。我耳朵偏下的位置一直就有点痛痛的。</li><li>张口困难：引致轻微的张口困难。</li><li>体温升高：术后1-2天部分患者出现轻度体温升高。</li><li>吞咽不适或疼痛。</li></ul></li></ul><h3 id="口腔清洁篇"><a href="#口腔清洁篇" class="headerlink" title="口腔清洁篇"></a>口腔清洁篇</h3><ul><li>当天不做剧烈运动或重体力劳动、不吸烟饮酒。</li><li>当天一定要注意不漱口，也不吮吸伤口。漱口可能会导致伤口处的血凝块脱落。当天吃完饭后喝清水用以代替清洁口腔，早点休息。</li><li>第二天开始可以使用漱口水来消毒，注意不要使用刺激性漱口水。我的医生开了西吡氯铵含漱液，还不错，但是漱口后口腔内会残留很重的味道，用清水或盐水多含漱几次就好了。</li><li>拔牙不一定要吃药！但是如果伤口较大、容易发炎，请服用医生开具的消炎药。如果疼痛剧烈，请服用医生开具的止痛药。</li><li>术后几天内都不要刷牙，避免刺激伤口。术后第一次刷牙先从非伤口侧进行。</li><li>术后1-2周内都不要使用冲牙器。</li></ul><h3 id="加快恢复篇"><a href="#加快恢复篇" class="headerlink" title="加快恢复篇"></a>加快恢复篇</h3><ul><li>术后保持充足的睡眠，能够恢复得更快。</li><li>术后前两天，可以对伤口处冰敷。</li><li>术后两天后，改为热敷。</li><li>术后不用总是卧床休息，起来走动一下呼吸新鲜空气也很好。</li><li>如果对面部肿胀情况很关注，可以每天拍摄一张自拍，用以对比肿胀情况。但也没必要太过关注，很快就会好的。</li></ul><h3 id="饮食篇"><a href="#饮食篇" class="headerlink" title="饮食篇"></a>饮食篇</h3><ul><li>拔牙当日，尽量吃流质或半流质饮食，如粥、汤等，且不宜吃过硬、过烫的东西。</li><li>一定不要吃特别细碎的食物，比如小米粥，避免食物塞入牙缝致使伤口发炎。别问我是怎么知道的！</li><li>尽量多食用蛋白质类食物，比如牛奶、豆类、肉类。</li><li>在能吃得下的情况，尽量吃多一些，身体才比较有能量恢复健康。</li><li>食物切得小块一点，更容易吞咽，但别切太碎了！可以用剪刀剪小或菜刀切小。</li><li>个人推荐食物：清汤粉丝、杂粮粥、排骨汤、牛奶、蜜糖水、雪糕等。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;tag-plugin note&quot; color=&quot;red&quot;&gt;&lt;div class=&quot;title&quot;&gt;请注意&lt;/div&gt;&lt;div class=&quot;body&quot;&gt;&lt;p&gt;本教程仅适用于门诊拔牙，如需住院拔牙请咨询医生。&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;



&lt;h2 id</summary>
      
    
    
    
    <category term="Health Notes" scheme="http://deskside.github.io/categories/health-notes/"/>
    
    
    <category term="Helath" scheme="http://deskside.github.io/tags/helath/"/>
    
  </entry>
  
  <entry>
    <title>好好刷牙</title>
    <link href="http://deskside.github.io/2022/04/23/brush-teeth/"/>
    <id>http://deskside.github.io/2022/04/23/brush-teeth/</id>
    <published>2022-04-23T06:05:21.000Z</published>
    <updated>2023-02-10T02:48:57.062Z</updated>
    
    <content type="html"><![CDATA[<p>本周，因为我想要拔除智齿，所以去医院做了检查。检查完毕后，医生夸了我的牙齿很漂亮也很健康，让我特别开心。</p><p>因为当天无法预约指定的拔牙医生，只能预约隔天的，所以我还是决定下次再来拔牙。不过，既然「来都来了」，加上我很久没有洗牙了，我就去洗牙了。虽然洗牙前医生说可能会有点痛，但是全程我都没有感觉到痛。只是放置在口腔的吸唾管，偶尔会令我有些反胃。</p><p>洗完之后，医生分享了刷牙的方法，我在此也以彩蛋形式分享给各位：<a href="https://mp.weixin.qq.com/s/i4jnoH3e_TKGgJxeFMfbuA">正确刷牙方法：巴氏刷牙法</a>。</p><p>现代很多人注重健康，经常健身，这自然是好事。但我们最应该注意的应该是日常中最容易被忽略的地方——刷牙。相比之下，我觉得运动健身都要稍稍排第二了。</p><p>牙齿的重要性其实不必多言：一方面，牙齿的美观度几乎决定了我们五官的整体表现，一口黑牙、缺牙、牙龈突出、牙里有菜……无论哪一点出现，我们都会觉得这个人不好看。另一方面，牙齿的健康是食欲的重要保障，牙疼过的人都懂。</p><p>从不保护好牙齿的后果讲：一方面，「牙疼不是病，疼起来真要命」。另一方面，牙齿的治疗费用超级贵，几百上千是常规，全面的根管治疗等都要上万——如此一想，好好刷牙基本上就是在赚钱了。像我这次的洗牙，只是非常常规的洗牙而已，费用就要 400 元。</p><p>话说到最后，我想起中国儿童健康教育似乎很缺乏牙齿教育。如果不是我妈年轻时没保护好牙齿、后来有一段时间经常需要看牙医，她也不会一直教育我要好好刷牙。而如果不是因为她一直督促我，我也不会将牙齿保护得比较好。但这种公众基础健康，其实理应也有广泛而普遍的国民教育。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本周，因为我想要拔除智齿，所以去医院做了检查。检查完毕后，医生夸了我的牙齿很漂亮也很健康，让我特别开心。&lt;/p&gt;
&lt;p&gt;因为当天无法预约指定的拔牙医生，只能预约隔天的，所以我还是决定下次再来拔牙。不过，既然「来都来了」，加上我很久没有洗牙了，我就去洗牙了。虽然洗牙前医生说可</summary>
      
    
    
    
    <category term="Health Notes" scheme="http://deskside.github.io/categories/health-notes/"/>
    
    
    <category term="健康" scheme="http://deskside.github.io/tags/%E5%81%A5%E5%BA%B7/"/>
    
  </entry>
  
  <entry>
    <title>如何放弃阅读一本书</title>
    <link href="http://deskside.github.io/2022/04/23/how-to-forfeit-a-book/"/>
    <id>http://deskside.github.io/2022/04/23/how-to-forfeit-a-book/</id>
    <published>2022-04-23T01:34:10.000Z</published>
    <updated>2023-02-10T02:42:53.105Z</updated>
    
    <content type="html"><![CDATA[<p>「拿起一本书，一定要从一而终地读完。」</p><p>这似乎是我们从小到大不言而明、约定俗成的规矩。书似乎是神圣的，我们必须尊重它。</p><p>如果你是老读者，在前几期我讨论《娱乐至死》的时候，你可能会认为尼尔·波兹曼过于追捧书籍、过于排斥新兴媒体。可实际上，在全书第二章，波兹曼便清晰地阐明了自己的看法：</p><blockquote><p>为了避免我的分析被理解成是对电视上的「垃圾」的司空见惯的抱怨，我必须先解释一下……说实话，我对这些所谓「垃圾」的喜爱绝不亚于其他任何人，我也非常清楚地知道，印刷机产生的垃圾可以让大峡谷满得溢出来。而在生产垃圾这一点上，电视的资历还远远比不上印刷机。——《娱乐至死》</p></blockquote><p>有些读者或许会反驳，对书籍要有高度的尊重，书籍是人类进步的阶梯。</p><p>确实如此，但这些读者忽略了一个基本事实：正如音频、视频一样，书只是信息载体的一种。信息载体本身没有优劣，只有适合与否，承载的信息本身才有优劣之分。因此：</p><ul><li>如果我们能坦然接受电视或互联网上，有很优秀的作品，也有很垃圾的。那我们也应接受书籍亦如此。</li><li>如果我们能坦然接受电视或互联网上，有适合我们的作品，也有不适合我们的。那我们也应接受书籍亦如此。</li><li>如果我们能坦然接受电视或互联网上，有些作品的某一部分很不错，但另一部分却很一般。那我们也应接受书籍亦如此。</li></ul><p>因为，如果我们在看视频的时候，在某些地方会倍速、会跳过、会不看，那我们也不妨同样放宽心态，对待书籍。有很多烂书，也有很多不适合我们的书。</p><p>在此分享一下，我买到烂书、却因为其长期领先销售排行榜而不敢出声的经历。</p><p>没错，我说的就是《摆渡人》和大冰作品系列。读完前者，我感到莫名其妙和不知所然，我不知道这个故事讲了个啥玩意儿，想表达什么。读完后者，我只觉得有些无病呻吟、强行升华。令人震惊的是，这几本书至今还摆放在很多书店的展架上。</p><hr><p>除了烂书可以整本抛弃之外，还有很多书，我们只需要搜寻适合我们的那一部分。</p><p>因此，跳读（跳过某些部分）和速读（快速阅读某些部分）显得尤为重要。受篇幅限制，详细技巧留待以后分享和探讨。</p><p>《如何阅读一本书》强调，阅读一本书必须提出的四个重要问题之一便是「这本书与我有什么关系」。试着在阅读前和阅读时不断向自己提出这些问题，我们就能更好地将一本书合适的、有用的部分融入自身知识体系，而将其余部分暂时抛去：</p><blockquote><p>如果这本书给了你一些资讯，你一定要问问这些资讯有什么意义。为什么这位作者会认为知道这件事很重要？你真的有必要去了解吗？如果这本书不只提供了资讯，还启发了你，就更有必要找出其他相关的、更深的含意或建议，以获得更多的启示。</p></blockquote><p>大胆地根据自己的需要，对一本书前前后后不同章节运用不同速度阅读，甚至略过某些章节，是很重要的阅读技巧。从头读到尾、一字不落的阅读方式，只适合少之又少的经典书籍。</p><hr><p>不过，值得提醒各位的是，省下读烂书、读不合适的书的时间，是为了留给好书更多阅读和思考的时间，而不是将阅读的时间另作他用，那未免显得有些本末倒置了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;「拿起一本书，一定要从一而终地读完。」&lt;/p&gt;
&lt;p&gt;这似乎是我们从小到大不言而明、约定俗成的规矩。书似乎是神圣的，我们必须尊重它。&lt;/p&gt;
&lt;p&gt;如果你是老读者，在前几期我讨论《娱乐至死》的时候，你可能会认为尼尔·波兹曼过于追捧书籍、过于排斥新兴媒体。可实际上，在全书第二</summary>
      
    
    
    
    <category term="Read and Write" scheme="http://deskside.github.io/categories/read-and-write/"/>
    
    
    <category term="阅读" scheme="http://deskside.github.io/tags/%E9%98%85%E8%AF%BB/"/>
    
    <category term="写作" scheme="http://deskside.github.io/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>犯错无错，你讨厌犯错吗？</title>
    <link href="http://deskside.github.io/2022/04/23/dont-be-afraid-of-mistakes/"/>
    <id>http://deskside.github.io/2022/04/23/dont-be-afraid-of-mistakes/</id>
    <published>2022-04-22T16:00:00.000Z</published>
    <updated>2023-02-10T02:45:31.713Z</updated>
    
    <content type="html"><![CDATA[<p>你犯过错吗？</p><p>你害怕或厌恶犯错吗？</p><p>你会为了不犯错，而用尽各种办法避免犯错的可能性吗？</p><p>我们对某样事物的厌恶多来自于曾有过的不妙经历，如果我们曾经因为犯错而受到了严厉的惩罚，那么我们此后便可能会不再犯同类型的错误，也可能更加极端，试图避免一切形式错误的发生。</p><p>社会文化也会参与到我们的认知过程，中国社会向来更崇尚低风险，低风险意味着更稳定、更少错误，当然也意味着进步的更加缓慢。</p><p>在我整个成长历程中，我不曾犯过严重的错误，也未受到过严重的惩戒。但这几年，我却发现自己不止一次地沿袭着「只要不开始，我就不会失败」的思想范式。</p><p><strong>这种思想范式，遵循这样的思维路径：因为犯错即是失败，失败就是不好的，不好的就要回避，因此我要回避任何可能的犯错——很有道理，不是吗？</strong></p><p>如果你了解说理的基础知识，你立刻会发现：这是一个很清晰的滑坡谬误。每一个环节看上去都很在理，但其实每一次因果推理都像滚雪球一样草率、仓促地就下了结论。</p><p>犯错不是失败，犯错是每一次成功的必经之路。每一次我们成功做了某件事，哪怕是最小的事情，比如学习踩单车、学习炒菜、学会某个单词的发音，都是在无数细碎的小错误之后达成的。只是那些错误看起来不太吓人罢了。</p><blockquote><p>正确的结果，是从大量错误中得出来的。没有大量错误作台阶，也就登不上最后正确结果的高座。——钱学森</p></blockquote><p>失败就是不好的吗？我们为什么不换一个思考「失败」的态度呢？</p><p>有一个历史小故事说道：曾有个年轻人问爱迪生「您曾失败了一万次，您对这些失败有何看法呢？」 爱迪生对年轻人说「我并没有失败过1万次，我只是发明了1万种行不通的方法。」</p><blockquote><p>I have not failed,I’ve just found 10,000 ways that won’t work.——Thomas Edison</p></blockquote><p>如果我们将每一次犯错、每一次小小的失败，视为通向更好的自己和成功做某事的捷径，那我们会不会更有勇气去尝试新鲜事物呢？会不会最后走得更远呢？</p><p>毕竟，像回避瘟疫一样回避犯错，就是一个最大的错误。</p><blockquote><p>The greatest mistake a man can ever make is to be afraid of making one.——Elbert Hubbard</p></blockquote><p>不过要注意的是，犯错不是我们的最终目的，我们的目的是改进和成长。如果我们反反复复犯的是同样一个错误，那这并没有什么好骄傲的，这代表我们从过错中没有学习到任何东西。</p><blockquote><p>If a mistake is not a stepping stone, it is a mistake.——Eli Siegel</p></blockquote><p>我忘记在哪本谈教育的书里看到过这样一个词：「犯错权」，孩子拥有犯错的权利。犯错意味着敢于尝试，因为只有尝试新事物才更有可能犯错，而这对形塑一个人正确的价值观有深远的影响。</p><p>我想这也不只是孩子的权利，成年人也有这样的权利。诚然，社会对于成年人犯错的宽容度要低得多，但在开放、合理的沟通之下、积极向对方阐明犯错后的改进措施，我相信他人也会更加理解和信任我们。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;你犯过错吗？&lt;/p&gt;
&lt;p&gt;你害怕或厌恶犯错吗？&lt;/p&gt;
&lt;p&gt;你会为了不犯错，而用尽各种办法避免犯错的可能性吗？&lt;/p&gt;
&lt;p&gt;我们对某样事物的厌恶多来自于曾有过的不妙经历，如果我们曾经因为犯错而受到了严厉的惩罚，那么我们此后便可能会不再犯同类型的错误，也可能更加极端，试</summary>
      
    
    
    
    <category term="Life Thoughts" scheme="http://deskside.github.io/categories/life-thoughts/"/>
    
    
    <category term="成长" scheme="http://deskside.github.io/tags/%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>先读百卷书，再行万里路，边读万卷书</title>
    <link href="http://deskside.github.io/2022/04/16/read-travel-read/"/>
    <id>http://deskside.github.io/2022/04/16/read-travel-read/</id>
    <published>2022-04-15T16:00:00.000Z</published>
    <updated>2023-02-10T02:36:43.720Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2022-年清明节出游小记"><a href="#2022-年清明节出游小记" class="headerlink" title="2022 年清明节出游小记"></a>2022 年清明节出游小记</h3><p>先跟大家分享一下这次的行程，这次只有两天半的旅程竟然在省内去了三个不同的城市，沿着广东西南部海岸线简单绕了一圈。主要行程是海陵岛。</p><p>回来之后的我，只对海陵岛有一个印象：海鲜也太新鲜、太便宜了！</p><p>读者朋友们，要理解我对海陵岛海鲜的夸赞，首先需要知道一个背景信息：我不喜欢吃海鲜，我几乎不吃鱼。</p><p>当天，我们在美团上找了一家评分还不错、而且有套餐的饭店。第一道菜是白灼青口，而白灼海鲜是最能辨识新鲜度的做法，我们吃完了一整盘也没有吃到一个让我们感到有一点腥味的青口。即使是我这种对海鲜腥味十分敏感的人都无可挑剔。</p><p>其他菜也同样新鲜、好吃，白灼虾、姜葱小蟹、丝瓜鱼丸汤、豉汁炒花甲、香煎墨鱼饼，外加两碗饭和一瓶大可乐，这么多又这么好吃只需要 108 元！</p><p>但是，海陵岛其他景点就没那么值得夸奖了。几乎每个海滩都是收费的，大约 30 元左右。岛上的一个丝绸之路博物馆门票费竟然要 68 元。其他很多地方也有很多潜在的宰客小贩。</p><p>因此，在去某个地方前提前查攻略排雷还是很重要的。我认为攻略的主要意义还是在排雷，而不是告诉我们哪里好玩、怎么走，旅途本身就是风景，我们只需要排除掉会严重影响我们心情的事情就好了。</p><hr><p>值得纪念的是行程第二天傍晚，我们在海陵岛的马尾岛海滩上，看到了很美的日落。</p><p>船夫像是飙车一样在海面上来回倾斜，引擎掀起浪花星星点点地洒在我们的身上。一行人第一次飙船，一直在惊呼过瘾。</p><p>我们被带到了离沙滩入口处很远的、人很少的沙滩。一波波潮水泛起，在巨大的沙滩面上来回翻滚。头顶的天空随着夕阳的沉睡而变换着色彩，从白皙到浅黄，从浅黄到深黄，黄中泛着红，红中透着褐。夕阳像是鹅蛋黄一样被远方的山丘一口一口吃掉，天空也变换出层层叠叠的浅紫色。</p><p>海风随着时间的流逝开始变得冷冽，温度在夕阳落山后骤降。半小时前穿着短袖还觉得很热的我，现在即使披上了长袖衬衫，也不停蹦跶叫冷。大家都焦急地等着船夫开船来接我们。</p><p>我抬头，紫、橙、黄、褐、黑轻柔地、均匀地堆叠在一起，上帝像是一个艺术家一样为夕阳落下后的天空调色。近岸海面上有很多渔船和运沙船，它们都被笼罩在浅浅的光影中，像是一副剪影画。</p><p>我只是在思考，如此美的画面，事实上每天都在发生。附近的居民不在乎，因为每天都能看到。远来的游客很在乎，可是一年又能看几次呢？</p><hr><p>我的朋友喜欢走马观花鸟枪换炮的旅行方式，以数量取胜。而我更喜欢自由散漫有深度的旅行方式，以轻松心境为佳。当然，既然是他组织和筹备的这次旅行，我自然也无所谓。</p><p>我初中的时候，和初中同学、同学父母参加过一次十分恶劣的泰国旅行团。从那次以后，我对旅游的诉求直接升级为了「必须自由行」。自己安排和预订行程，虽然准备工作多一些，但是不仅乐在其中，也更能真正地旅行到。</p><p>我只接受在一种特殊情况下参加旅行团，即一日游。对于离城区很远的景点，一日游参团实际上还是很方便的，比自己前往景点也要划算很多。一般价格在几十元 到 150 元左右，出发前也能问清楚全程是否有购物，价格一般也是预付的明码标价。</p><hr><p>值得一提的是，这是我第一次在没有任何长辈的情况下，和朋友两个人自驾出游👏！（虽然全程都是他开车🌚）</p><p>我认为自驾游应该是「车」最重要的使用场景之一（注意：是最重要而不是最常用）。很多有特色的景点或小镇，如果依靠公共交通前往，要么中转繁琐时间漫长，要么必须在最后一段路打的。</p><p>相比之下，自驾游不仅能抹去所有买票、等车、中转、打的的烦恼，还能拥有一个随意放东西的巨大行李箱——后备箱。</p><p>当然，自驾游不是完美的。最好能有 2 个会开车的人轮流开、避免疲劳驾驶，油费、停车费、过路费加起来也不便宜，到了任何地方都必须优先考虑停车的事情。</p><hr><p>最后，我清明节回来后没多久，我所居住的区域宣布进入管控状态。从乐观的角度讲，该玩的都玩完了，在家宅一宅也很开心。我属于既可以出去嗨，也可以在家宅的类型。不过，现在我们这一带已经解封了，我也希望广州的疫情态势能够尽快缓解。</p><h3 id="你喜欢旅游吗？你能享受旅途吗？"><a href="#你喜欢旅游吗？你能享受旅途吗？" class="headerlink" title="你喜欢旅游吗？你能享受旅途吗？"></a>你喜欢旅游吗？你能享受旅途吗？</h3><p>我相信，如果你用「你喜欢旅游吗」去问人，十个人里面有九个人会宣称他们十分喜欢旅游，甚至是热爱。</p><p>但是，如果你用「你能享受旅途吗？」再去问人，我相信很多人就不会那么果决地回答了，我们大概率会得到一个犹犹豫豫的肯定回答——「应该能享受吧」。</p><p>在旅途中，我们时常会发现自己并没有出发前那喜欢和期待这次旅途了（这跟多巴胺也密切相关：期待与喜欢二者是分离的）。我们可能会赖在酒店内，睡个懒觉、点个外卖、看个剧，临了傍晚再出门找家餐馆吃个饭，到处闲逛一下，一天就结束了。</p><p>如果我们成功让自己出了门，坐上交通工具奔赴景点，又很有可能会抱怨太阳毒辣，或雨水充沛，或天寒地冻，或人潮汹涌，或冷冷清清。逛了一圈拍了照，好像就已经完成所有任务了，赶紧打道回府。</p><p>大学中的几次旅游，让我对「旅游」有了新的思考：</p><ul><li>首先，除非你能开放心态、克服胆怯、勇于尝试、敢于搭讪，否则电影里那些美好又奇妙的旅途奇遇是绝不可能发生在你身上的。</li><li>如果你是和朋友或和对象去旅游，那么，旅途的乐趣更多源于你和同伴的相处模式，而非风景名胜。你们的打趣、互损、陪伴本身，就是旅途的重要趣味。换言之，此时重要的是和谁，而非去哪儿。</li><li>如果你是一个人或与家人去旅游，那么，此时你能拥有多大的智慧去享受旅途、风景、人文本身，能否从旅途中获得思辨的乐趣，便开始对旅途的乐趣有了决定性影响了。</li></ul><p><strong>在第三种情况下，是什么决定了我们对旅途乐趣的享受能力？</strong></p><p>是我们的心态吗？是我们的旅行次数吗？是我们的智慧吗？是我们的人生阅历吗？是我们出发前的准备吗？……</p><p>我得出的结论是：先读百卷书，再行万里路，边读万卷书。因为，如果一个人对自己、对他人、对世界一无所知、一无所思，他的旅途也极有可能是乏味的。</p><p>行万里路是好事，但我认为前提是我们「具备一定的思辨能力和知识储备」，你才能体会到蕴藏在旅途每一个细节的乐趣。我们不妨从反面思考：</p><ul><li>如果你对走在异乡的道路上，只有「一边走路一边玩手机」这样的认知，那你一定会错过沿途路边形形色色、趣味盎然的异乡特色。</li><li>如果你对去一个地方旅游，只有「去看景区就好了」这样的想法，那你一定会错过市井街巷中更有生活气息的人、事、物。</li><li>如果你对「旅游应该做什么」只有拍照这个答案，那你一定会错过细心观察自然环境和人间琐事的乐趣。夕阳在天空留下最后一抹晕染开的色彩，形形色色的植物有着不同的外观，街边小贩车上的瓶瓶罐罐……</li></ul><p>因此，我认为：</p><p>「先读百卷书」只是一个基础条件，诚然你也可以通过很多方法提升自己的思辨能力和知识储备，只不过阅读是一条捷径罢了。</p><p>「再行万里路」将我们与他人、与世界相连结，我们不是一座孤岛，而是与他人有着千丝万缕联系的人类一员。</p><p>「边读万卷书」帮助我们持续生长，生命总是在不断地进化，无论是对于人类整体，还是人类个体而言。我们需要为自己的人生提供思想的能源，才能更好地享受这个世界。</p><p>阅读与看世界，确实相辅相成。但如果觉得自己的基础知识和思考能力还不够，或许看世界也可以推迟一点再去，不是吗？</p><h3 id="如何才算一次旅游的终点？"><a href="#如何才算一次旅游的终点？" class="headerlink" title="如何才算一次旅游的终点？"></a>如何才算一次旅游的终点？</h3><p>另一个我最近苦思不解的问题是：如何才算一次旅游的终点？</p><p>每一次旅游结束，我都会有一种意犹未尽的感觉，让即使已经回到了日常生活中的我感觉「好像有点不对劲」。这种感觉随着时间的流逝逐渐变淡，却总会在我们回忆往昔的时候再次出现。</p><p><strong>我开始思考，哪一刻算是一次旅途的结束点呢？</strong></p><ul><li>是回到家的那一刻吗？</li><li>是发朋友圈的那一刻吗？</li><li>是整理好旅途照片的那一刻吗？</li><li>是跟亲朋分享完照片的那一刻吗？</li><li>是写好游记的那一刻吗？</li><li>……</li></ul><p>另一方面，整理照片是一个挺累人的活，人脑的容量没那么大，不可能记住那么多照片。就算洗照片出来，我们的家里也不可能拥有一张无边无际的照片墙，把每一张都贴上去。</p><p>对于我而言，我甚至懒得筛选和删减照片，我更愿意让他们就躺在我的手机里，由 iPhone 自带的照片随机回忆小组件来提醒我，过去发生过什么事情。</p><p>毕竟，每天打开手机的时候，看到桌面小组件随机提供的照片回忆时，我还是十分有分享欲的。我时常截个屏分享给我的朋友们：看，今天我的手机回忆了当初我们的这张照片！</p><p><strong>或许，根本不存在旅游的终点呢？</strong></p><p>人类是一种以记忆为基础的生物。举例而言，最近很火的美剧《<a href="https://movie.douban.com/subject/34885342/">Severance</a>》里面，分离手术将一个人分割为「完全没有任何外部记忆、只需要在八小时内工作的人」和「拥有所有记忆、在八小时工作时间之外的人」，而因为前者没有记忆却又清楚地知道自己在外界是有记忆的，这种巨大的矛盾推动了整个故事的开展。</p><p>凡是过往，皆为序章。凡是记忆，皆为起点。我们会在任何事情发生后，由大脑去雕刻和美化我们的记忆，让自己此后一生都时不时地回味起那段美好的时光。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;2022-年清明节出游小记&quot;&gt;&lt;a href=&quot;#2022-年清明节出游小记&quot; class=&quot;headerlink&quot; title=&quot;2022 年清明节出游小记&quot;&gt;&lt;/a&gt;2022 年清明节出游小记&lt;/h3&gt;&lt;p&gt;先跟大家分享一下这次的行程，这次只有两天半的旅程竟然</summary>
      
    
    
    
    <category term="Life Thoughts" scheme="http://deskside.github.io/categories/life-thoughts/"/>
    
    
    <category term="人生" scheme="http://deskside.github.io/tags/%E4%BA%BA%E7%94%9F/"/>
    
    <category term="游记" scheme="http://deskside.github.io/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
</feed>
